{
  "prompts": [
    {
      "prompt": "Generate test plan for kube-znn service based on system metrics.\n\nMETRICS:\n- CPU: 80.8% (within critical range (>60%))\n- Memory: 82.5% (within critical range (>70%))  \n- Response Time: 1504.0ms (within critical range (>70ms))\n- Error Rate: 0.0%\n- Throughput: 0.0 req/s\n- Network Latency: 0.0ms\n\nLOAD:\n- Users: 30, Rate: 3.0 req/s, Duration: 120s\n- Pattern: burst (Burst pattern)\n- Current: Moderate load\n\nINFRASTRUCTURE:\n- Pods: 3 active, 0 pending, 0 failed\n- Resources: 6 CPUs, 6GB RAM\n- Target: 5 pods, Quality: 600\n\nANALYSIS:\n- Status: operational\n- Test Type: load\n- Priority: high\n- Justification: The system is currently experiencing high CPU and memory usage (80.8% and 82.5%, respectively) which indicates that it is struggling with the current load. The number of users and request rate (0.0 req/s) is low, but the system's health is still in a critical state. This suggests that the current load pattern, which is a burst pattern, is causing the system to become overloaded. Therefore, a load test would be the most appropriate test type to conduct in order to identify the system's capacity and scalability limits.\n\nREQUIREMENT: Generate tests ONLY for \"load\" type.\n\nTEST GUIDELINES:\n- response_time: latency, performance, resource efficiency, network tests, pod metrics, service endpoints, resource monitoring, CPU/memory usage, response time validation, endpoint accessibility\n- reachability: connectivity, availability, pod status, health checks, service discovery, network policies, pod readiness, service endpoints, DNS resolution, port accessibility\n- load: capacity, scalability, stress, resource limits, throughput, horizontal pod autoscaling, resource utilization, performance degradation, bottleneck identification\n\nGenerate comprehensive test suites based on system state. Create thorough kubectl commands that cover all aspects of the recommended test type for complete system validation.\n\nJSON FORMAT:\n{\n  \"test_cases\": [\n    {\n      \"id\": \"test_1\",\n      \"name\": \"load - Basic Validation\", \n      \"description\": \"Comprehensive load test covering fundamental system aspects\",\n      \"test_type\": \"load\",\n      \"priority\": \"high\",\n      \"expected_result\": \"System demonstrates optimal load characteristics\",\n      \"success_criteria\": \"All load metrics within acceptable thresholds\",\n      \"failure_indicators\": \"Any load metric exceeds critical thresholds\"\n    },\n    {\n      \"id\": \"test_2\",\n      \"name\": \"load - Resource Impact Analysis\", \n      \"description\": \"Evaluate load behavior under current resource constraints\",\n      \"test_type\": \"load\",\n      \"priority\": \"high\",\n      \"expected_result\": \"System maintains load performance despite resource limitations\",\n      \"success_criteria\": \"Resource usage remains stable while load metrics are optimal\",\n      \"failure_indicators\": \"Resource constraints negatively impact load performance\"\n    },\n    {\n      \"id\": \"test_3\",\n      \"name\": \"load - Load Pattern Validation\", \n      \"description\": \"Validate load characteristics under current load pattern\",\n      \"test_type\": \"load\",\n      \"priority\": \"high\",\n      \"expected_result\": \"System handles current load pattern with optimal load\",\n      \"success_criteria\": \"load remains consistent throughout load pattern\",\n      \"failure_indicators\": \"Load pattern causes load degradation\"\n    },\n    {\n      \"id\": \"test_4\",\n      \"name\": \"load - Infrastructure Validation\", \n      \"description\": \"Comprehensive load validation across all infrastructure components\",\n      \"test_type\": \"load\",\n      \"priority\": \"high\",\n      \"expected_result\": \"All infrastructure components demonstrate optimal load\",\n      \"success_criteria\": \"Pods, services, and network components show consistent load\",\n      \"failure_indicators\": \"Infrastructure components show inconsistent load behavior\"\n    }\n  ],\n  \"kubectl_commands\": [\n    {\n      \"id\": \"cmd_1\",\n      \"description\": \"Comprehensive pod status and health validation\",\n      \"command\": \"kubectl get pods -n default | grep kube-znn | head -10\",\n      \"expected_output\": \"All pods running and ready with proper resource allocation\",\n      \"test_type\": \"load\",\n      \"success_criteria\": \"All pods show Running status with Ready condition\", \n      \"failure_indicators\": \"Any pod shows Pending, Error, CrashLoopBackOff, or resource issues\",\n      \"oracle_validation\": \"Pod status and resource allocation validation\"\n    },\n    {\n      \"id\": \"cmd_2\",\n      \"description\": \"Service discovery and endpoint connectivity validation\",\n      \"command\": \"kubectl get svc -n default | grep kube-znn\",\n      \"expected_output\": \"Valid cluster IP and active endpoints\",\n      \"test_type\": \"load\",\n      \"success_criteria\": \"Service has valid cluster IP with active endpoint subsets\",\n      \"failure_indicators\": \"Service has no cluster IP, pending status, or empty endpoints\",\n      \"oracle_validation\": \"Service discovery and endpoint connectivity validation\"\n    },\n    {\n      \"id\": \"cmd_3\",\n      \"description\": \"Resource utilization and performance metrics analysis\",\n      \"command\": \"kubectl top pods -n default | grep kube-znn\",\n      \"expected_output\": \"CPU and memory usage metrics for all containers\",\n      \"test_type\": \"load\",\n      \"success_criteria\": \"Pods show optimal resource utilization within defined limits\",\n      \"failure_indicators\": \"Pods show excessive CPU/memory usage or resource contention\",\n      \"oracle_validation\": \"Resource utilization and performance validation\"\n    },\n    {\n      \"id\": \"cmd_4\",\n      \"description\": \"Comprehensive log analysis for system health\",\n      \"command\": \"kubectl logs -n default $(kubectl get pods -n default | grep kube-znn | head -1 | awk '{print $1}') --tail=100 --timestamps\",\n      \"expected_output\": \"Clean logs with proper timestamps and no critical errors\",\n      \"test_type\": \"load\",\n      \"success_criteria\": \"No ERROR, FATAL, or critical warnings in recent logs\",\n      \"failure_indicators\": \"Critical errors, warnings, or abnormal log patterns detected\",\n      \"oracle_validation\": \"System health and log analysis validation\"\n    },\n    {\n      \"id\": \"cmd_5\",\n      \"description\": \"Service endpoint accessibility and response validation\",\n      \"command\": \"kubectl exec -n default $(kubectl get pods -n default | grep kube-znn | head -1 | awk '{print $1}') -- curl -s -o /dev/null -w '%{http_code} %{time_total}' http://localhost:80/news.php\",\n      \"expected_output\": \"200 with acceptable response time\",\n      \"test_type\": \"load\",\n      \"success_criteria\": \"HTTP 200 response with response time within acceptable thresholds\",\n      \"failure_indicators\": \"Non-200 HTTP response, connection failure, or excessive response time\",\n      \"oracle_validation\": \"Service endpoint accessibility and performance validation\"\n    },\n    {\n      \"id\": \"cmd_6\",\n      \"description\": \"Network policy and connectivity validation\",\n      \"command\": \"kubectl get networkpolicies -n default && kubectl get pods -n default | grep kube-znn | awk '{print $6}'\",\n      \"expected_output\": \"Network policies and pod IP addresses\",\n      \"test_type\": \"load\",\n      \"success_criteria\": \"Pods have valid IP addresses and network policies are properly configured\",\n      \"failure_indicators\": \"Pods have no IP addresses or network policies are misconfigured\",\n      \"oracle_validation\": \"Network connectivity and policy validation\"\n    },\n    {\n      \"id\": \"cmd_7\",\n      \"description\": \"Resource limits and requests validation\",\n      \"command\": \"kubectl get pods -n default | grep kube-znn | head -1 | awk '{print $1}' | xargs -I {} kubectl describe pod -n default {} | grep -A 10 'Limits\\|Requests'\",\n      \"expected_output\": \"Resource limits and requests configuration\",\n      \"test_type\": \"load\",\n      \"success_criteria\": \"Resource limits and requests are properly configured and within acceptable ranges\",\n      \"failure_indicators\": \"Resource limits too low, requests too high, or misconfigured resource allocation\",\n      \"oracle_validation\": \"Resource configuration validation\"\n    }\n  ]\n}\n\nReturn only valid JSON.",
      "test_plan": {
        "test_cases": [
          {
            "id": "test_1",
            "name": "load - Basic Validation",
            "description": "Comprehensive load test covering fundamental system aspects",
            "test_type": "load",
            "priority": "high",
            "expected_result": "System demonstrates optimal load characteristics",
            "success_criteria": "All load metrics within acceptable thresholds",
            "failure_indicators": "Any load metric exceeds critical thresholds"
          },
          {
            "id": "test_2",
            "name": "load - Resource Impact Analysis",
            "description": "Evaluate load behavior under current resource constraints",
            "test_type": "load",
            "priority": "high",
            "expected_result": "System maintains load performance despite resource limitations",
            "success_criteria": "Resource usage remains stable while load metrics are optimal",
            "failure_indicators": "Resource constraints negatively impact load performance"
          },
          {
            "id": "test_3",
            "name": "load - Load Pattern Validation",
            "description": "Validate load characteristics under current load pattern",
            "test_type": "load",
            "priority": "high",
            "expected_result": "System handles current load pattern with optimal load",
            "success_criteria": "load remains consistent throughout load pattern",
            "failure_indicators": "Load pattern causes load degradation"
          },
          {
            "id": "test_4",
            "name": "load - Infrastructure Validation",
            "description": "Comprehensive load validation across all infrastructure components",
            "test_type": "load",
            "priority": "high",
            "expected_result": "All infrastructure components demonstrate optimal load",
            "success_criteria": "Pods, services, and network components show consistent load",
            "failure_indicators": "Infrastructure components show inconsistent load behavior"
          }
        ],
        "kubectl_commands": [
          {
            "id": "cmd_1",
            "description": "Comprehensive pod status and health validation",
            "command": "kubectl get pods -n default | grep kube-znn | head -10",
            "expected_output": "All pods running and ready with proper resource allocation",
            "test_type": "load",
            "success_criteria": "All pods show Running status with Ready condition",
            "failure_indicators": "Any pod shows Pending, Error, CrashLoopBackOff, or resource issues",
            "oracle_validation": "Pod status and resource allocation validation"
          },
          {
            "id": "cmd_2",
            "description": "Service discovery and endpoint connectivity validation",
            "command": "kubectl get svc -n default | grep kube-znn",
            "expected_output": "Valid cluster IP and active endpoints",
            "test_type": "load",
            "success_criteria": "Service has valid cluster IP with active endpoint subsets",
            "failure_indicators": "Service has no cluster IP, pending status, or empty endpoints",
            "oracle_validation": "Service discovery and endpoint connectivity validation"
          },
          {
            "id": "cmd_3",
            "description": "Resource utilization and performance metrics analysis",
            "command": "kubectl top pods -n default | grep kube-znn",
            "expected_output": "CPU and memory usage metrics for all containers",
            "test_type": "load",
            "success_criteria": "Pods show optimal resource utilization within defined limits",
            "failure_indicators": "Pods show excessive CPU/memory usage or resource contention",
            "oracle_validation": "Resource utilization and performance validation"
          }
        ]
      },
      "kubectl_commands": [
        {
          "id": "cmd_1",
          "description": "Comprehensive pod status and health validation",
          "command": "kubectl get pods -n default | grep kube-znn | head -10",
          "expected_output": "All pods running and ready with proper resource allocation",
          "test_type": "load",
          "success_criteria": "All pods show Running status with Ready condition",
          "failure_indicators": "Any pod shows Pending, Error, CrashLoopBackOff, or resource issues",
          "oracle_validation": "Pod status and resource allocation validation"
        },
        {
          "id": "cmd_2",
          "description": "Service discovery and endpoint connectivity validation",
          "command": "kubectl get svc -n default | grep kube-znn",
          "expected_output": "Valid cluster IP and active endpoints",
          "test_type": "load",
          "success_criteria": "Service has valid cluster IP with active endpoint subsets",
          "failure_indicators": "Service has no cluster IP, pending status, or empty endpoints",
          "oracle_validation": "Service discovery and endpoint connectivity validation"
        },
        {
          "id": "cmd_3",
          "description": "Resource utilization and performance metrics analysis",
          "command": "kubectl top pods -n default | grep kube-znn",
          "expected_output": "CPU and memory usage metrics for all containers",
          "test_type": "load",
          "success_criteria": "Pods show optimal resource utilization within defined limits",
          "failure_indicators": "Pods show excessive CPU/memory usage or resource contention",
          "oracle_validation": "Resource utilization and performance validation"
        }
      ],
      "test_cases": [
        {
          "id": "test_1",
          "name": "load - Basic Validation",
          "description": "Comprehensive load test covering fundamental system aspects",
          "test_type": "load",
          "priority": "high",
          "expected_result": "System demonstrates optimal load characteristics",
          "success_criteria": "All load metrics within acceptable thresholds",
          "failure_indicators": "Any load metric exceeds critical thresholds"
        },
        {
          "id": "test_2",
          "name": "load - Resource Impact Analysis",
          "description": "Evaluate load behavior under current resource constraints",
          "test_type": "load",
          "priority": "high",
          "expected_result": "System maintains load performance despite resource limitations",
          "success_criteria": "Resource usage remains stable while load metrics are optimal",
          "failure_indicators": "Resource constraints negatively impact load performance"
        },
        {
          "id": "test_3",
          "name": "load - Load Pattern Validation",
          "description": "Validate load characteristics under current load pattern",
          "test_type": "load",
          "priority": "high",
          "expected_result": "System handles current load pattern with optimal load",
          "success_criteria": "load remains consistent throughout load pattern",
          "failure_indicators": "Load pattern causes load degradation"
        },
        {
          "id": "test_4",
          "name": "load - Infrastructure Validation",
          "description": "Comprehensive load validation across all infrastructure components",
          "test_type": "load",
          "priority": "high",
          "expected_result": "All infrastructure components demonstrate optimal load",
          "success_criteria": "Pods, services, and network components show consistent load",
          "failure_indicators": "Infrastructure components show inconsistent load behavior"
        }
      ]
    }
  ],
  "llm_responses": [
    {
      "prompt": "Generate test plan for kube-znn service based on system metrics.\n\nMETRICS:\n- CPU: 80.8% (within critical range (>60%))\n- Memory: 82.5% (within critical range (>70%))  \n- Response Time: 1504.0ms (within critical range (>70ms))\n- Error Rate: 0.0%\n- Throughput: 0.0 req/s\n- Network Latency: 0.0ms\n\nLOAD:\n- Users: 30, Rate: 3.0 req/s, Duration: 120s\n- Pattern: burst (Burst pattern)\n- Current: Moderate load\n\nINFRASTRUCTURE:\n- Pods: 3 active, 0 pending, 0 failed\n- Resources: 6 CPUs, 6GB RAM\n- Target: 5 pods, Quality: 600\n\nANALYSIS:\n- Status: operational\n- Test Type: load\n- Priority: high\n- Justification: The system is currently experiencing high CPU and memory usage (80.8% and 82.5%, respectively) which indicates that it is struggling with the current load. The number of users and request rate (0.0 req/s) is low, but the system's health is still in a critical state. This suggests that the current load pattern, which is a burst pattern, is causing the system to become overloaded. Therefore, a load test would be the most appropriate test type to conduct in order to identify the system's capacity and scalability limits.\n\nREQUIREMENT: Generate tests ONLY for \"load\" type.\n\nTEST GUIDELINES:\n- response_time: latency, performance, resource efficiency, network tests, pod metrics, service endpoints, resource monitoring, CPU/memory usage, response time validation, endpoint accessibility\n- reachability: connectivity, availability, pod status, health checks, service discovery, network policies, pod readiness, service endpoints, DNS resolution, port accessibility\n- load: capacity, scalability, stress, resource limits, throughput, horizontal pod autoscaling, resource utilization, performance degradation, bottleneck identification\n\nGenerate comprehensive test suites based on system state. Create thorough kubectl commands that cover all aspects of the recommended test type for complete system validation.\n\nJSON FORMAT:\n{\n  \"test_cases\": [\n    {\n      \"id\": \"test_1\",\n      \"name\": \"load - Basic Validation\", \n      \"description\": \"Comprehensive load test covering fundamental system aspects\",\n      \"test_type\": \"load\",\n      \"priority\": \"high\",\n      \"expected_result\": \"System demonstrates optimal load characteristics\",\n      \"success_criteria\": \"All load metrics within acceptable thresholds\",\n      \"failure_indicators\": \"Any load metric exceeds critical thresholds\"\n    },\n    {\n      \"id\": \"test_2\",\n      \"name\": \"load - Resource Impact Analysis\", \n      \"description\": \"Evaluate load behavior under current resource constraints\",\n      \"test_type\": \"load\",\n      \"priority\": \"high\",\n      \"expected_result\": \"System maintains load performance despite resource limitations\",\n      \"success_criteria\": \"Resource usage remains stable while load metrics are optimal\",\n      \"failure_indicators\": \"Resource constraints negatively impact load performance\"\n    },\n    {\n      \"id\": \"test_3\",\n      \"name\": \"load - Load Pattern Validation\", \n      \"description\": \"Validate load characteristics under current load pattern\",\n      \"test_type\": \"load\",\n      \"priority\": \"high\",\n      \"expected_result\": \"System handles current load pattern with optimal load\",\n      \"success_criteria\": \"load remains consistent throughout load pattern\",\n      \"failure_indicators\": \"Load pattern causes load degradation\"\n    },\n    {\n      \"id\": \"test_4\",\n      \"name\": \"load - Infrastructure Validation\", \n      \"description\": \"Comprehensive load validation across all infrastructure components\",\n      \"test_type\": \"load\",\n      \"priority\": \"high\",\n      \"expected_result\": \"All infrastructure components demonstrate optimal load\",\n      \"success_criteria\": \"Pods, services, and network components show consistent load\",\n      \"failure_indicators\": \"Infrastructure components show inconsistent load behavior\"\n    }\n  ],\n  \"kubectl_commands\": [\n    {\n      \"id\": \"cmd_1\",\n      \"description\": \"Comprehensive pod status and health validation\",\n      \"command\": \"kubectl get pods -n default | grep kube-znn | head -10\",\n      \"expected_output\": \"All pods running and ready with proper resource allocation\",\n      \"test_type\": \"load\",\n      \"success_criteria\": \"All pods show Running status with Ready condition\", \n      \"failure_indicators\": \"Any pod shows Pending, Error, CrashLoopBackOff, or resource issues\",\n      \"oracle_validation\": \"Pod status and resource allocation validation\"\n    },\n    {\n      \"id\": \"cmd_2\",\n      \"description\": \"Service discovery and endpoint connectivity validation\",\n      \"command\": \"kubectl get svc -n default | grep kube-znn\",\n      \"expected_output\": \"Valid cluster IP and active endpoints\",\n      \"test_type\": \"load\",\n      \"success_criteria\": \"Service has valid cluster IP with active endpoint subsets\",\n      \"failure_indicators\": \"Service has no cluster IP, pending status, or empty endpoints\",\n      \"oracle_validation\": \"Service discovery and endpoint connectivity validation\"\n    },\n    {\n      \"id\": \"cmd_3\",\n      \"description\": \"Resource utilization and performance metrics analysis\",\n      \"command\": \"kubectl top pods -n default | grep kube-znn\",\n      \"expected_output\": \"CPU and memory usage metrics for all containers\",\n      \"test_type\": \"load\",\n      \"success_criteria\": \"Pods show optimal resource utilization within defined limits\",\n      \"failure_indicators\": \"Pods show excessive CPU/memory usage or resource contention\",\n      \"oracle_validation\": \"Resource utilization and performance validation\"\n    },\n    {\n      \"id\": \"cmd_4\",\n      \"description\": \"Comprehensive log analysis for system health\",\n      \"command\": \"kubectl logs -n default $(kubectl get pods -n default | grep kube-znn | head -1 | awk '{print $1}') --tail=100 --timestamps\",\n      \"expected_output\": \"Clean logs with proper timestamps and no critical errors\",\n      \"test_type\": \"load\",\n      \"success_criteria\": \"No ERROR, FATAL, or critical warnings in recent logs\",\n      \"failure_indicators\": \"Critical errors, warnings, or abnormal log patterns detected\",\n      \"oracle_validation\": \"System health and log analysis validation\"\n    },\n    {\n      \"id\": \"cmd_5\",\n      \"description\": \"Service endpoint accessibility and response validation\",\n      \"command\": \"kubectl exec -n default $(kubectl get pods -n default | grep kube-znn | head -1 | awk '{print $1}') -- curl -s -o /dev/null -w '%{http_code} %{time_total}' http://localhost:80/news.php\",\n      \"expected_output\": \"200 with acceptable response time\",\n      \"test_type\": \"load\",\n      \"success_criteria\": \"HTTP 200 response with response time within acceptable thresholds\",\n      \"failure_indicators\": \"Non-200 HTTP response, connection failure, or excessive response time\",\n      \"oracle_validation\": \"Service endpoint accessibility and performance validation\"\n    },\n    {\n      \"id\": \"cmd_6\",\n      \"description\": \"Network policy and connectivity validation\",\n      \"command\": \"kubectl get networkpolicies -n default && kubectl get pods -n default | grep kube-znn | awk '{print $6}'\",\n      \"expected_output\": \"Network policies and pod IP addresses\",\n      \"test_type\": \"load\",\n      \"success_criteria\": \"Pods have valid IP addresses and network policies are properly configured\",\n      \"failure_indicators\": \"Pods have no IP addresses or network policies are misconfigured\",\n      \"oracle_validation\": \"Network connectivity and policy validation\"\n    },\n    {\n      \"id\": \"cmd_7\",\n      \"description\": \"Resource limits and requests validation\",\n      \"command\": \"kubectl get pods -n default | grep kube-znn | head -1 | awk '{print $1}' | xargs -I {} kubectl describe pod -n default {} | grep -A 10 'Limits\\|Requests'\",\n      \"expected_output\": \"Resource limits and requests configuration\",\n      \"test_type\": \"load\",\n      \"success_criteria\": \"Resource limits and requests are properly configured and within acceptable ranges\",\n      \"failure_indicators\": \"Resource limits too low, requests too high, or misconfigured resource allocation\",\n      \"oracle_validation\": \"Resource configuration validation\"\n    }\n  ]\n}\n\nReturn only valid JSON.",
      "test_plan": {
        "test_cases": [
          {
            "id": "test_1",
            "name": "load - Basic Validation",
            "description": "Comprehensive load test covering fundamental system aspects",
            "test_type": "load",
            "priority": "high",
            "expected_result": "System demonstrates optimal load characteristics",
            "success_criteria": "All load metrics within acceptable thresholds",
            "failure_indicators": "Any load metric exceeds critical thresholds"
          },
          {
            "id": "test_2",
            "name": "load - Resource Impact Analysis",
            "description": "Evaluate load behavior under current resource constraints",
            "test_type": "load",
            "priority": "high",
            "expected_result": "System maintains load performance despite resource limitations",
            "success_criteria": "Resource usage remains stable while load metrics are optimal",
            "failure_indicators": "Resource constraints negatively impact load performance"
          },
          {
            "id": "test_3",
            "name": "load - Load Pattern Validation",
            "description": "Validate load characteristics under current load pattern",
            "test_type": "load",
            "priority": "high",
            "expected_result": "System handles current load pattern with optimal load",
            "success_criteria": "load remains consistent throughout load pattern",
            "failure_indicators": "Load pattern causes load degradation"
          },
          {
            "id": "test_4",
            "name": "load - Infrastructure Validation",
            "description": "Comprehensive load validation across all infrastructure components",
            "test_type": "load",
            "priority": "high",
            "expected_result": "All infrastructure components demonstrate optimal load",
            "success_criteria": "Pods, services, and network components show consistent load",
            "failure_indicators": "Infrastructure components show inconsistent load behavior"
          }
        ],
        "kubectl_commands": [
          {
            "id": "cmd_1",
            "description": "Comprehensive pod status and health validation",
            "command": "kubectl get pods -n default | grep kube-znn | head -10",
            "expected_output": "All pods running and ready with proper resource allocation",
            "test_type": "load",
            "success_criteria": "All pods show Running status with Ready condition",
            "failure_indicators": "Any pod shows Pending, Error, CrashLoopBackOff, or resource issues",
            "oracle_validation": "Pod status and resource allocation validation"
          },
          {
            "id": "cmd_2",
            "description": "Service discovery and endpoint connectivity validation",
            "command": "kubectl get svc -n default | grep kube-znn",
            "expected_output": "Valid cluster IP and active endpoints",
            "test_type": "load",
            "success_criteria": "Service has valid cluster IP with active endpoint subsets",
            "failure_indicators": "Service has no cluster IP, pending status, or empty endpoints",
            "oracle_validation": "Service discovery and endpoint connectivity validation"
          },
          {
            "id": "cmd_3",
            "description": "Resource utilization and performance metrics analysis",
            "command": "kubectl top pods -n default | grep kube-znn",
            "expected_output": "CPU and memory usage metrics for all containers",
            "test_type": "load",
            "success_criteria": "Pods show optimal resource utilization within defined limits",
            "failure_indicators": "Pods show excessive CPU/memory usage or resource contention",
            "oracle_validation": "Resource utilization and performance validation"
          }
        ]
      },
      "kubectl_commands": [
        {
          "id": "cmd_1",
          "description": "Comprehensive pod status and health validation",
          "command": "kubectl get pods -n default | grep kube-znn | head -10",
          "expected_output": "All pods running and ready with proper resource allocation",
          "test_type": "load",
          "success_criteria": "All pods show Running status with Ready condition",
          "failure_indicators": "Any pod shows Pending, Error, CrashLoopBackOff, or resource issues",
          "oracle_validation": "Pod status and resource allocation validation"
        },
        {
          "id": "cmd_2",
          "description": "Service discovery and endpoint connectivity validation",
          "command": "kubectl get svc -n default | grep kube-znn",
          "expected_output": "Valid cluster IP and active endpoints",
          "test_type": "load",
          "success_criteria": "Service has valid cluster IP with active endpoint subsets",
          "failure_indicators": "Service has no cluster IP, pending status, or empty endpoints",
          "oracle_validation": "Service discovery and endpoint connectivity validation"
        },
        {
          "id": "cmd_3",
          "description": "Resource utilization and performance metrics analysis",
          "command": "kubectl top pods -n default | grep kube-znn",
          "expected_output": "CPU and memory usage metrics for all containers",
          "test_type": "load",
          "success_criteria": "Pods show optimal resource utilization within defined limits",
          "failure_indicators": "Pods show excessive CPU/memory usage or resource contention",
          "oracle_validation": "Resource utilization and performance validation"
        }
      ],
      "test_cases": [
        {
          "id": "test_1",
          "name": "load - Basic Validation",
          "description": "Comprehensive load test covering fundamental system aspects",
          "test_type": "load",
          "priority": "high",
          "expected_result": "System demonstrates optimal load characteristics",
          "success_criteria": "All load metrics within acceptable thresholds",
          "failure_indicators": "Any load metric exceeds critical thresholds"
        },
        {
          "id": "test_2",
          "name": "load - Resource Impact Analysis",
          "description": "Evaluate load behavior under current resource constraints",
          "test_type": "load",
          "priority": "high",
          "expected_result": "System maintains load performance despite resource limitations",
          "success_criteria": "Resource usage remains stable while load metrics are optimal",
          "failure_indicators": "Resource constraints negatively impact load performance"
        },
        {
          "id": "test_3",
          "name": "load - Load Pattern Validation",
          "description": "Validate load characteristics under current load pattern",
          "test_type": "load",
          "priority": "high",
          "expected_result": "System handles current load pattern with optimal load",
          "success_criteria": "load remains consistent throughout load pattern",
          "failure_indicators": "Load pattern causes load degradation"
        },
        {
          "id": "test_4",
          "name": "load - Infrastructure Validation",
          "description": "Comprehensive load validation across all infrastructure components",
          "test_type": "load",
          "priority": "high",
          "expected_result": "All infrastructure components demonstrate optimal load",
          "success_criteria": "Pods, services, and network components show consistent load",
          "failure_indicators": "Infrastructure components show inconsistent load behavior"
        }
      ]
    }
  ],
  "test_plans": [
    {
      "test_cases": [
        {
          "id": "test_1",
          "name": "load - Basic Validation",
          "description": "Comprehensive load test covering fundamental system aspects",
          "test_type": "load",
          "priority": "high",
          "expected_result": "System demonstrates optimal load characteristics",
          "success_criteria": "All load metrics within acceptable thresholds",
          "failure_indicators": "Any load metric exceeds critical thresholds"
        },
        {
          "id": "test_2",
          "name": "load - Resource Impact Analysis",
          "description": "Evaluate load behavior under current resource constraints",
          "test_type": "load",
          "priority": "high",
          "expected_result": "System maintains load performance despite resource limitations",
          "success_criteria": "Resource usage remains stable while load metrics are optimal",
          "failure_indicators": "Resource constraints negatively impact load performance"
        },
        {
          "id": "test_3",
          "name": "load - Load Pattern Validation",
          "description": "Validate load characteristics under current load pattern",
          "test_type": "load",
          "priority": "high",
          "expected_result": "System handles current load pattern with optimal load",
          "success_criteria": "load remains consistent throughout load pattern",
          "failure_indicators": "Load pattern causes load degradation"
        },
        {
          "id": "test_4",
          "name": "load - Infrastructure Validation",
          "description": "Comprehensive load validation across all infrastructure components",
          "test_type": "load",
          "priority": "high",
          "expected_result": "All infrastructure components demonstrate optimal load",
          "success_criteria": "Pods, services, and network components show consistent load",
          "failure_indicators": "Infrastructure components show inconsistent load behavior"
        }
      ],
      "kubectl_commands": [
        {
          "id": "cmd_1",
          "description": "Comprehensive pod status and health validation",
          "command": "kubectl get pods -n default | grep kube-znn | head -10",
          "expected_output": "All pods running and ready with proper resource allocation",
          "test_type": "load",
          "success_criteria": "All pods show Running status with Ready condition",
          "failure_indicators": "Any pod shows Pending, Error, CrashLoopBackOff, or resource issues",
          "oracle_validation": "Pod status and resource allocation validation"
        },
        {
          "id": "cmd_2",
          "description": "Service discovery and endpoint connectivity validation",
          "command": "kubectl get svc -n default | grep kube-znn",
          "expected_output": "Valid cluster IP and active endpoints",
          "test_type": "load",
          "success_criteria": "Service has valid cluster IP with active endpoint subsets",
          "failure_indicators": "Service has no cluster IP, pending status, or empty endpoints",
          "oracle_validation": "Service discovery and endpoint connectivity validation"
        },
        {
          "id": "cmd_3",
          "description": "Resource utilization and performance metrics analysis",
          "command": "kubectl top pods -n default | grep kube-znn",
          "expected_output": "CPU and memory usage metrics for all containers",
          "test_type": "load",
          "success_criteria": "Pods show optimal resource utilization within defined limits",
          "failure_indicators": "Pods show excessive CPU/memory usage or resource contention",
          "oracle_validation": "Resource utilization and performance validation"
        }
      ]
    }
  ],
  "kubectl_commands": [
    {
      "id": "cmd_1",
      "description": "Comprehensive pod status and health validation",
      "command": "kubectl get pods -n default | grep kube-znn | head -10",
      "expected_output": "All pods running and ready with proper resource allocation",
      "test_type": "load",
      "success_criteria": "All pods show Running status with Ready condition",
      "failure_indicators": "Any pod shows Pending, Error, CrashLoopBackOff, or resource issues",
      "oracle_validation": "Pod status and resource allocation validation"
    },
    {
      "id": "cmd_2",
      "description": "Service discovery and endpoint connectivity validation",
      "command": "kubectl get svc -n default | grep kube-znn",
      "expected_output": "Valid cluster IP and active endpoints",
      "test_type": "load",
      "success_criteria": "Service has valid cluster IP with active endpoint subsets",
      "failure_indicators": "Service has no cluster IP, pending status, or empty endpoints",
      "oracle_validation": "Service discovery and endpoint connectivity validation"
    },
    {
      "id": "cmd_3",
      "description": "Resource utilization and performance metrics analysis",
      "command": "kubectl top pods -n default | grep kube-znn",
      "expected_output": "CPU and memory usage metrics for all containers",
      "test_type": "load",
      "success_criteria": "Pods show optimal resource utilization within defined limits",
      "failure_indicators": "Pods show excessive CPU/memory usage or resource contention",
      "oracle_validation": "Resource utilization and performance validation"
    }
  ]
}