{
  "prompts": [
    {
      "prompt": "Generate test plan for kube-znn service based on system metrics.\n\nMETRICS:\n- CPU: 1.5% (within healthy range (<25%))\n- Memory: 4.0% (within healthy range (<30%))  \n- Response Time: 2500.0ms (within critical range (>70ms))\n- Error Rate: 0.0%\n- Throughput: 0.0 req/s\n- Network Latency: 0.0ms\n\nLOAD:\n- Users: 30, Rate: 3.0 req/s, Duration: 120s\n- Pattern: burst (Burst pattern)\n- Current: Moderate load\n\nINFRASTRUCTURE:\n- Pods: 3 active, 0 pending, 0 failed\n- Resources: 6 CPUs, 6GB RAM\n- Target: 5 pods, Quality: 600\n\nANALYSIS:\n- Status: operational\n- Test Type: reachability\n- Priority: high\n- Justification: The primary concern in this situation is reachability due to the high number of failed pods (15) and the extremely high error rate (95%). There are currently no users connecting, which meets the conditions for the priority 1 reachability test. The system is unable to be reached, and there is a potential network latency issue or pods not responding, which further supports this recommendation.\n\nREQUIREMENT: Generate tests ONLY for \"reachability\" type.\n\nTEST GUIDELINES:\n- response_time: latency, performance, resource efficiency, network tests, pod metrics, service endpoints, resource monitoring, CPU/memory usage, response time validation, endpoint accessibility\n- reachability: connectivity, availability, pod status, health checks, service discovery, network policies, pod readiness, service endpoints, DNS resolution, port accessibility\n- load: capacity, scalability, stress, resource limits, throughput, horizontal pod autoscaling, resource utilization, performance degradation, bottleneck identification\n\nGenerate comprehensive test suites based on system state. Create thorough kubectl commands that cover all aspects of the recommended test type for complete system validation.\n\nJSON FORMAT:\n{\n  \"test_cases\": [\n    {\n      \"id\": \"test_1\",\n      \"name\": \"reachability - Basic Validation\", \n      \"description\": \"Comprehensive reachability test covering fundamental system aspects\",\n      \"test_type\": \"reachability\",\n      \"priority\": \"high\",\n      \"expected_result\": \"System demonstrates optimal reachability characteristics\",\n      \"success_criteria\": \"All reachability metrics within acceptable thresholds\",\n      \"failure_indicators\": \"Any reachability metric exceeds critical thresholds\"\n    },\n    {\n      \"id\": \"test_2\",\n      \"name\": \"reachability - Resource Impact Analysis\", \n      \"description\": \"Evaluate reachability behavior under current resource constraints\",\n      \"test_type\": \"reachability\",\n      \"priority\": \"high\",\n      \"expected_result\": \"System maintains reachability performance despite resource limitations\",\n      \"success_criteria\": \"Resource usage remains stable while reachability metrics are optimal\",\n      \"failure_indicators\": \"Resource constraints negatively impact reachability performance\"\n    },\n    {\n      \"id\": \"test_3\",\n      \"name\": \"reachability - Load Pattern Validation\", \n      \"description\": \"Validate reachability characteristics under current load pattern\",\n      \"test_type\": \"reachability\",\n      \"priority\": \"high\",\n      \"expected_result\": \"System handles current load pattern with optimal reachability\",\n      \"success_criteria\": \"reachability remains consistent throughout load pattern\",\n      \"failure_indicators\": \"Load pattern causes reachability degradation\"\n    },\n    {\n      \"id\": \"test_4\",\n      \"name\": \"reachability - Infrastructure Validation\", \n      \"description\": \"Comprehensive reachability validation across all infrastructure components\",\n      \"test_type\": \"reachability\",\n      \"priority\": \"high\",\n      \"expected_result\": \"All infrastructure components demonstrate optimal reachability\",\n      \"success_criteria\": \"Pods, services, and network components show consistent reachability\",\n      \"failure_indicators\": \"Infrastructure components show inconsistent reachability behavior\"\n    }\n  ],\n  \"kubectl_commands\": [\n    {\n      \"id\": \"cmd_1\",\n      \"description\": \"Comprehensive pod status and health validation\",\n      \"command\": \"kubectl get pods -n default | grep kube-znn | head -10\",\n      \"expected_output\": \"All pods running and ready with proper resource allocation\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"All pods show Running status with Ready condition\", \n      \"failure_indicators\": \"Any pod shows Pending, Error, CrashLoopBackOff, or resource issues\",\n      \"oracle_validation\": \"Pod status and resource allocation validation\"\n    },\n    {\n      \"id\": \"cmd_2\",\n      \"description\": \"Service discovery and endpoint connectivity validation\",\n      \"command\": \"kubectl get svc -n default | grep kube-znn\",\n      \"expected_output\": \"Valid cluster IP and active endpoints\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"Service has valid cluster IP with active endpoint subsets\",\n      \"failure_indicators\": \"Service has no cluster IP, pending status, or empty endpoints\",\n      \"oracle_validation\": \"Service discovery and endpoint connectivity validation\"\n    },\n    {\n      \"id\": \"cmd_3\",\n      \"description\": \"Resource utilization and performance metrics analysis\",\n      \"command\": \"kubectl top pods -n default | grep kube-znn\",\n      \"expected_output\": \"CPU and memory usage metrics for all containers\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"Pods show optimal resource utilization within defined limits\",\n      \"failure_indicators\": \"Pods show excessive CPU/memory usage or resource contention\",\n      \"oracle_validation\": \"Resource utilization and performance validation\"\n    },\n    {\n      \"id\": \"cmd_4\",\n      \"description\": \"Comprehensive log analysis for system health\",\n      \"command\": \"kubectl logs -n default $(kubectl get pods -n default | grep kube-znn | head -1 | awk '{print $1}') --tail=100 --timestamps\",\n      \"expected_output\": \"Clean logs with proper timestamps and no critical errors\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"No ERROR, FATAL, or critical warnings in recent logs\",\n      \"failure_indicators\": \"Critical errors, warnings, or abnormal log patterns detected\",\n      \"oracle_validation\": \"System health and log analysis validation\"\n    },\n    {\n      \"id\": \"cmd_5\",\n      \"description\": \"Service endpoint accessibility and response validation\",\n      \"command\": \"kubectl exec -n default $(kubectl get pods -n default | grep kube-znn | head -1 | awk '{print $1}') -- curl -s -o /dev/null -w '%{http_code} %{time_total}' http://localhost:80/news.php\",\n      \"expected_output\": \"200 with acceptable response time\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"HTTP 200 response with response time within acceptable thresholds\",\n      \"failure_indicators\": \"Non-200 HTTP response, connection failure, or excessive response time\",\n      \"oracle_validation\": \"Service endpoint accessibility and performance validation\"\n    },\n    {\n      \"id\": \"cmd_6\",\n      \"description\": \"Network policy and connectivity validation\",\n      \"command\": \"kubectl get networkpolicies -n default && kubectl get pods -n default | grep kube-znn | awk '{print $6}'\",\n      \"expected_output\": \"Network policies and pod IP addresses\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"Pods have valid IP addresses and network policies are properly configured\",\n      \"failure_indicators\": \"Pods have no IP addresses or network policies are misconfigured\",\n      \"oracle_validation\": \"Network connectivity and policy validation\"\n    },\n    {\n      \"id\": \"cmd_7\",\n      \"description\": \"Resource limits and requests validation\",\n      \"command\": \"kubectl get pods -n default | grep kube-znn | head -1 | awk '{print $1}' | xargs -I {} kubectl describe pod -n default {} | grep -A 10 'Limits\\|Requests'\",\n      \"expected_output\": \"Resource limits and requests configuration\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"Resource limits and requests are properly configured and within acceptable ranges\",\n      \"failure_indicators\": \"Resource limits too low, requests too high, or misconfigured resource allocation\",\n      \"oracle_validation\": \"Resource configuration validation\"\n    }\n  ]\n}\n\nReturn only valid JSON.",
      "test_plan": {
        "test_cases": [
          {
            "id": "test_1",
            "name": "reachability - Basic Validation",
            "description": "Comprehensive reachability test covering fundamental system aspects",
            "test_type": "reachability",
            "priority": "high",
            "expected_result": "System demonstrates optimal reachability characteristics",
            "success_criteria": "All reachability metrics within acceptable thresholds",
            "failure_indicators": "Any reachability metric exceeds critical thresholds"
          },
          {
            "id": "test_2",
            "name": "reachability - Resource Impact Analysis",
            "description": "Evaluate reachability behavior under current resource constraints",
            "test_type": "reachability",
            "priority": "high",
            "expected_result": "System maintains reachability performance despite resource limitations",
            "success_criteria": "Resource usage remains stable while reachability metrics are optimal",
            "failure_indicators": "Resource constraints negatively impact reachability performance"
          },
          {
            "id": "test_3",
            "name": "reachability - Load Pattern Validation",
            "description": "Validate reachability characteristics under current load pattern",
            "test_type": "reachability",
            "priority": "high",
            "expected_result": "System handles current load pattern with optimal reachability",
            "success_criteria": "reachability remains consistent throughout load pattern",
            "failure_indicators": "Load pattern causes reachability degradation"
          },
          {
            "id": "test_4",
            "name": "reachability - Infrastructure Validation",
            "description": "Comprehensive reachability validation across all infrastructure components",
            "test_type": "reachability",
            "priority": "high",
            "expected_result": "All infrastructure components demonstrate optimal reachability",
            "success_criteria": "Pods, services, and network components show consistent reachability",
            "failure_indicators": "Infrastructure components show inconsistent reachability behavior"
          }
        ],
        "kubectl_commands": [
          {
            "id": "cmd_1",
            "description": "Comprehensive pod status and health validation",
            "command": "kubectl get pods -n default | grep kube-znn | head -10",
            "expected_output": "All pods running and ready with proper resource allocation",
            "test_type": "reachability",
            "success_criteria": "All pods show Running status with Ready condition",
            "failure_indicators": "Any pod shows Pending, Error, CrashLoopBackOff, or resource issues"
          },
          {
            "id": "cmd_2",
            "description": "Service discovery and endpoint connectivity validation",
            "command": "kubectl get svc -n default | grep kube-znn",
            "expected_output": "Valid cluster IP and active endpoints",
            "test_type": "reachability",
            "success_criteria": "Service has valid cluster IP with active endpoint subsets",
            "failure_indicators": "Service has no cluster IP, pending status, or empty endpoints"
          },
          {
            "id": "cmd_3",
            "description": "Resource utilization and performance metrics analysis",
            "command": "kubectl top pods -n default | grep kube-znn",
            "expected_output": "CPU and memory usage metrics for all containers",
            "test_type": "reachability",
            "success_criteria": "Pods show optimal resource utilization within defined limits",
            "failure_indicators": "Pods show excessive CPU/memory usage or resource contention"
          },
          {
            "id": "cmd_4",
            "description": "Comprehensive log analysis for system health",
            "command": "kubectl logs -n default $(kubectl get pods -n default | grep kube-znn | head -1 | awk '{print $1}') --tail=100 --timestamps",
            "expected_output": "Clean logs with proper timestamps and no critical errors",
            "test_type": "reachability",
            "success_criteria": "No ERROR, FATAL, or critical warnings in recent logs",
            "failure_indicators": "Critical errors, warnings, or abnormal log patterns detected"
          },
          {
            "id": "cmd_5",
            "description": "Service endpoint accessibility and response validation",
            "command": "kubectl exec -n default $(kubectl get pods -n default | grep kube-znn | head -1 | awk '{print $1}') -- curl -s -o /dev/null -w '%{http_code} %{time_total}' http://localhost:80/news.php",
            "expected_output": "200 with acceptable response time",
            "test_type": "reachability",
            "success_criteria": "HTTP 200 response with response time within acceptable thresholds",
            "failure_indicators": "Non-200 HTTP response, connection failure, or excessive response time"
          },
          {
            "id": "cmd_6",
            "description": "Network policy and connectivity validation",
            "command": "kubectl get networkpolicies -n default && kubectl get pods -n default | grep kube-znn | awk '{print $6}'",
            "expected_output": "Network policies and pod IP addresses",
            "test_type": "reachability",
            "success_criteria": "Pods have valid IP addresses and network policies are properly configured",
            "failure_indicators": "Pods have no IP addresses or network policies are misconfigured"
          }
        ]
      },
      "kubectl_commands": [
        {
          "id": "cmd_1",
          "description": "Comprehensive pod status and health validation",
          "command": "kubectl get pods -n default | grep kube-znn | head -10",
          "expected_output": "All pods running and ready with proper resource allocation",
          "test_type": "reachability",
          "success_criteria": "All pods show Running status with Ready condition",
          "failure_indicators": "Any pod shows Pending, Error, CrashLoopBackOff, or resource issues"
        },
        {
          "id": "cmd_2",
          "description": "Service discovery and endpoint connectivity validation",
          "command": "kubectl get svc -n default | grep kube-znn",
          "expected_output": "Valid cluster IP and active endpoints",
          "test_type": "reachability",
          "success_criteria": "Service has valid cluster IP with active endpoint subsets",
          "failure_indicators": "Service has no cluster IP, pending status, or empty endpoints"
        },
        {
          "id": "cmd_3",
          "description": "Resource utilization and performance metrics analysis",
          "command": "kubectl top pods -n default | grep kube-znn",
          "expected_output": "CPU and memory usage metrics for all containers",
          "test_type": "reachability",
          "success_criteria": "Pods show optimal resource utilization within defined limits",
          "failure_indicators": "Pods show excessive CPU/memory usage or resource contention"
        },
        {
          "id": "cmd_4",
          "description": "Comprehensive log analysis for system health",
          "command": "kubectl logs -n default $(kubectl get pods -n default | grep kube-znn | head -1 | awk '{print $1}') --tail=100 --timestamps",
          "expected_output": "Clean logs with proper timestamps and no critical errors",
          "test_type": "reachability",
          "success_criteria": "No ERROR, FATAL, or critical warnings in recent logs",
          "failure_indicators": "Critical errors, warnings, or abnormal log patterns detected"
        },
        {
          "id": "cmd_5",
          "description": "Service endpoint accessibility and response validation",
          "command": "kubectl exec -n default $(kubectl get pods -n default | grep kube-znn | head -1 | awk '{print $1}') -- curl -s -o /dev/null -w '%{http_code} %{time_total}' http://localhost:80/news.php",
          "expected_output": "200 with acceptable response time",
          "test_type": "reachability",
          "success_criteria": "HTTP 200 response with response time within acceptable thresholds",
          "failure_indicators": "Non-200 HTTP response, connection failure, or excessive response time"
        },
        {
          "id": "cmd_6",
          "description": "Network policy and connectivity validation",
          "command": "kubectl get networkpolicies -n default && kubectl get pods -n default | grep kube-znn | awk '{print $6}'",
          "expected_output": "Network policies and pod IP addresses",
          "test_type": "reachability",
          "success_criteria": "Pods have valid IP addresses and network policies are properly configured",
          "failure_indicators": "Pods have no IP addresses or network policies are misconfigured"
        }
      ],
      "test_cases": [
        {
          "id": "test_1",
          "name": "reachability - Basic Validation",
          "description": "Comprehensive reachability test covering fundamental system aspects",
          "test_type": "reachability",
          "priority": "high",
          "expected_result": "System demonstrates optimal reachability characteristics",
          "success_criteria": "All reachability metrics within acceptable thresholds",
          "failure_indicators": "Any reachability metric exceeds critical thresholds"
        },
        {
          "id": "test_2",
          "name": "reachability - Resource Impact Analysis",
          "description": "Evaluate reachability behavior under current resource constraints",
          "test_type": "reachability",
          "priority": "high",
          "expected_result": "System maintains reachability performance despite resource limitations",
          "success_criteria": "Resource usage remains stable while reachability metrics are optimal",
          "failure_indicators": "Resource constraints negatively impact reachability performance"
        },
        {
          "id": "test_3",
          "name": "reachability - Load Pattern Validation",
          "description": "Validate reachability characteristics under current load pattern",
          "test_type": "reachability",
          "priority": "high",
          "expected_result": "System handles current load pattern with optimal reachability",
          "success_criteria": "reachability remains consistent throughout load pattern",
          "failure_indicators": "Load pattern causes reachability degradation"
        },
        {
          "id": "test_4",
          "name": "reachability - Infrastructure Validation",
          "description": "Comprehensive reachability validation across all infrastructure components",
          "test_type": "reachability",
          "priority": "high",
          "expected_result": "All infrastructure components demonstrate optimal reachability",
          "success_criteria": "Pods, services, and network components show consistent reachability",
          "failure_indicators": "Infrastructure components show inconsistent reachability behavior"
        }
      ]
    },
    {
      "request": {
        "context": {
          "experiment_id": "experiment_reachability_1761569381",
          "used_system_cpu": 1.5,
          "used_system_memory": 4.0,
          "median_response_time": 2500.0,
          "concurrent_users": 30,
          "request_rate": 3.0,
          "session_duration": 120,
          "load_pattern": "burst",
          "load_pattern_description": "Burst pattern",
          "current_load_description": "Moderate load",
          "target_system_pods": 5,
          "quality_of_media": 600,
          "target_system_architecture": "Microservices",
          "allocated_cpus": 6,
          "allocated_memory": 6,
          "error_rate": 0.0,
          "throughput": 0.0,
          "network_latency": 0.0,
          "active_pods": 3,
          "pending_pods": 0,
          "failed_pods": 0,
          "system_status": "operational",
          "cpu_range_description": "within healthy range (<25%)",
          "memory_range_description": "within healthy range (<30%)",
          "response_time_range_description": "within critical range (>70ms)",
          "recommended_test_type": "reachability",
          "test_justification": "The primary concern in this situation is reachability due to the high number of failed pods (15) and the extremely high error rate (95%). There are currently no users connecting, which meets the conditions for the priority 1 reachability test. The system is unable to be reached, and there is a potential network latency issue or pods not responding, which further supports this recommendation.",
          "test_priority": "high"
        },
        "category": "planner_v10_3",
        "prompt": "Generate test plan for kube-znn service based on system metrics.\n\nMETRICS:\n- CPU: 1.5% (within healthy range (<25%))\n- Memory: 4.0% (within healthy range (<30%))  \n- Response Time: 2500.0ms (within critical range (>70ms))\n- Error Rate: 0.0%\n- Throughput: 0.0 req/s\n- Network Latency: 0.0ms\n\nLOAD:\n- Users: 30, Rate: 3.0 req/s, Duration: 120s\n- Pattern: burst (Burst pattern)\n- Current: Moderate load\n\nINFRASTRUCTURE:\n- Pods: 3 active, 0 pending, 0 failed\n- Resources: 6 CPUs, 6GB RAM\n- Target: 5 pods, Quality: 600\n\nANALYSIS:\n- Status: operational\n- Test Type: reachability\n- Priority: high\n- Justification: The primary concern in this situation is reachability due to the high number of failed pods (15) and the extremely high error rate (95%). There are currently no users connecting, which meets the conditions for the priority 1 reachability test. The system is unable to be reached, and there is a potential network latency issue or pods not responding, which further supports this recommendation.\n\nREQUIREMENT: Generate tests ONLY for \"reachability\" type.\n\nTEST GUIDELINES:\n- response_time: latency, performance, resource efficiency, network tests, pod metrics, service endpoints, resource monitoring, CPU/memory usage, response time validation, endpoint accessibility\n- reachability: connectivity, availability, pod status, health checks, service discovery, network policies, pod readiness, service endpoints, DNS resolution, port accessibility\n- load: capacity, scalability, stress, resource limits, throughput, horizontal pod autoscaling, resource utilization, performance degradation, bottleneck identification\n\nGenerate comprehensive test suites based on system state. Create thorough kubectl commands that cover all aspects of the recommended test type for complete system validation.\n\nJSON FORMAT:\n{\n  \"test_cases\": [\n    {\n      \"id\": \"test_1\",\n      \"name\": \"reachability - Basic Validation\", \n      \"description\": \"Comprehensive reachability test covering fundamental system aspects\",\n      \"test_type\": \"reachability\",\n      \"priority\": \"high\",\n      \"expected_result\": \"System demonstrates optimal reachability characteristics\",\n      \"success_criteria\": \"All reachability metrics within acceptable thresholds\",\n      \"failure_indicators\": \"Any reachability metric exceeds critical thresholds\"\n    },\n    {\n      \"id\": \"test_2\",\n      \"name\": \"reachability - Resource Impact Analysis\", \n      \"description\": \"Evaluate reachability behavior under current resource constraints\",\n      \"test_type\": \"reachability\",\n      \"priority\": \"high\",\n      \"expected_result\": \"System maintains reachability performance despite resource limitations\",\n      \"success_criteria\": \"Resource usage remains stable while reachability metrics are optimal\",\n      \"failure_indicators\": \"Resource constraints negatively impact reachability performance\"\n    },\n    {\n      \"id\": \"test_3\",\n      \"name\": \"reachability - Load Pattern Validation\", \n      \"description\": \"Validate reachability characteristics under current load pattern\",\n      \"test_type\": \"reachability\",\n      \"priority\": \"high\",\n      \"expected_result\": \"System handles current load pattern with optimal reachability\",\n      \"success_criteria\": \"reachability remains consistent throughout load pattern\",\n      \"failure_indicators\": \"Load pattern causes reachability degradation\"\n    },\n    {\n      \"id\": \"test_4\",\n      \"name\": \"reachability - Infrastructure Validation\", \n      \"description\": \"Comprehensive reachability validation across all infrastructure components\",\n      \"test_type\": \"reachability\",\n      \"priority\": \"high\",\n      \"expected_result\": \"All infrastructure components demonstrate optimal reachability\",\n      \"success_criteria\": \"Pods, services, and network components show consistent reachability\",\n      \"failure_indicators\": \"Infrastructure components show inconsistent reachability behavior\"\n    }\n  ],\n  \"kubectl_commands\": [\n    {\n      \"id\": \"cmd_1\",\n      \"description\": \"Comprehensive pod status and health validation\",\n      \"command\": \"kubectl get pods -n default | grep kube-znn | head -10\",\n      \"expected_output\": \"All pods running and ready with proper resource allocation\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"All pods show Running status with Ready condition\", \n      \"failure_indicators\": \"Any pod shows Pending, Error, CrashLoopBackOff, or resource issues\",\n      \"oracle_validation\": \"Pod status and resource allocation validation\"\n    },\n    {\n      \"id\": \"cmd_2\",\n      \"description\": \"Service discovery and endpoint connectivity validation\",\n      \"command\": \"kubectl get svc -n default | grep kube-znn\",\n      \"expected_output\": \"Valid cluster IP and active endpoints\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"Service has valid cluster IP with active endpoint subsets\",\n      \"failure_indicators\": \"Service has no cluster IP, pending status, or empty endpoints\",\n      \"oracle_validation\": \"Service discovery and endpoint connectivity validation\"\n    },\n    {\n      \"id\": \"cmd_3\",\n      \"description\": \"Resource utilization and performance metrics analysis\",\n      \"command\": \"kubectl top pods -n default | grep kube-znn\",\n      \"expected_output\": \"CPU and memory usage metrics for all containers\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"Pods show optimal resource utilization within defined limits\",\n      \"failure_indicators\": \"Pods show excessive CPU/memory usage or resource contention\",\n      \"oracle_validation\": \"Resource utilization and performance validation\"\n    },\n    {\n      \"id\": \"cmd_4\",\n      \"description\": \"Comprehensive log analysis for system health\",\n      \"command\": \"kubectl logs -n default $(kubectl get pods -n default | grep kube-znn | head -1 | awk '{print $1}') --tail=100 --timestamps\",\n      \"expected_output\": \"Clean logs with proper timestamps and no critical errors\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"No ERROR, FATAL, or critical warnings in recent logs\",\n      \"failure_indicators\": \"Critical errors, warnings, or abnormal log patterns detected\",\n      \"oracle_validation\": \"System health and log analysis validation\"\n    },\n    {\n      \"id\": \"cmd_5\",\n      \"description\": \"Service endpoint accessibility and response validation\",\n      \"command\": \"kubectl exec -n default $(kubectl get pods -n default | grep kube-znn | head -1 | awk '{print $1}') -- curl -s -o /dev/null -w '%{http_code} %{time_total}' http://localhost:80/news.php\",\n      \"expected_output\": \"200 with acceptable response time\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"HTTP 200 response with response time within acceptable thresholds\",\n      \"failure_indicators\": \"Non-200 HTTP response, connection failure, or excessive response time\",\n      \"oracle_validation\": \"Service endpoint accessibility and performance validation\"\n    },\n    {\n      \"id\": \"cmd_6\",\n      \"description\": \"Network policy and connectivity validation\",\n      \"command\": \"kubectl get networkpolicies -n default && kubectl get pods -n default | grep kube-znn | awk '{print $6}'\",\n      \"expected_output\": \"Network policies and pod IP addresses\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"Pods have valid IP addresses and network policies are properly configured\",\n      \"failure_indicators\": \"Pods have no IP addresses or network policies are misconfigured\",\n      \"oracle_validation\": \"Network connectivity and policy validation\"\n    },\n    {\n      \"id\": \"cmd_7\",\n      \"description\": \"Resource limits and requests validation\",\n      \"command\": \"kubectl get pods -n default | grep kube-znn | head -1 | awk '{print $1}' | xargs -I {} kubectl describe pod -n default {} | grep -A 10 'Limits\\|Requests'\",\n      \"expected_output\": \"Resource limits and requests configuration\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"Resource limits and requests are properly configured and within acceptable ranges\",\n      \"failure_indicators\": \"Resource limits too low, requests too high, or misconfigured resource allocation\",\n      \"oracle_validation\": \"Resource configuration validation\"\n    }\n  ]\n}\n\nReturn only valid JSON.",
        "prompt_type": "test_generation"
      },
      "response": {
        "timestamp": "2025-10-27T12:49:59.630861",
        "unique_session_id": "experiment_reachability_1761569381_unknown_20251027_124943_166547",
        "context": {
          "experiment_id": "experiment_reachability_1761569381",
          "used_system_cpu": 1.5,
          "used_system_memory": 4.0,
          "median_response_time": 2500.0,
          "concurrent_users": 30,
          "request_rate": 3.0,
          "session_duration": 120,
          "load_pattern": "burst",
          "load_pattern_description": "Burst pattern",
          "current_load_description": "Moderate load",
          "target_system_pods": 5,
          "quality_of_media": 600,
          "target_system_architecture": "Microservices",
          "allocated_cpus": 6,
          "allocated_memory": 6,
          "error_rate": 0.0,
          "throughput": 0.0,
          "network_latency": 0.0,
          "active_pods": 3,
          "pending_pods": 0,
          "failed_pods": 0,
          "system_status": "operational",
          "cpu_range_description": "within healthy range (<25%)",
          "memory_range_description": "within healthy range (<30%)",
          "response_time_range_description": "within critical range (>70ms)",
          "recommended_test_type": "reachability",
          "test_justification": "The primary concern in this situation is reachability due to the high number of failed pods (15) and the extremely high error rate (95%). There are currently no users connecting, which meets the conditions for the priority 1 reachability test. The system is unable to be reached, and there is a potential network latency issue or pods not responding, which further supports this recommendation.",
          "test_priority": "high"
        },
        "prompt": "Generate test plan for kube-znn service based on system metrics.\n\nMETRICS:\n- CPU: 1.5% (within healthy range (<25%))\n- Memory: 4.0% (within healthy range (<30%))  \n- Response Time: 2500.0ms (within critical range (>70ms))\n- Error Rate: 0.0%\n- Throughput: 0.0 req/s\n- Network Latency: 0.0ms\n\nLOAD:\n- Users: 30, Rate: 3.0 req/s, Duration: 120s\n- Pattern: burst (Burst pattern)\n- Current: Moderate load\n\nINFRASTRUCTURE:\n- Pods: 3 active, 0 pending, 0 failed\n- Resources: 6 CPUs, 6GB RAM\n- Target: 5 pods, Quality: 600\n\nANALYSIS:\n- Status: operational\n- Test Type: reachability\n- Priority: high\n- Justification: The primary concern in this situation is reachability due to the high number of failed pods (15) and the extremely high error rate (95%). There are currently no users connecting, which meets the conditions for the priority 1 reachability test. The system is unable to be reached, and there is a potential network latency issue or pods not responding, which further supports this recommendation.\n\nREQUIREMENT: Generate tests ONLY for \"reachability\" type.\n\nTEST GUIDELINES:\n- response_time: latency, performance, resource efficiency, network tests, pod metrics, service endpoints, resource monitoring, CPU/memory usage, response time validation, endpoint accessibility\n- reachability: connectivity, availability, pod status, health checks, service discovery, network policies, pod readiness, service endpoints, DNS resolution, port accessibility\n- load: capacity, scalability, stress, resource limits, throughput, horizontal pod autoscaling, resource utilization, performance degradation, bottleneck identification\n\nGenerate comprehensive test suites based on system state. Create thorough kubectl commands that cover all aspects of the recommended test type for complete system validation.\n\nJSON FORMAT:\n{\n  \"test_cases\": [\n    {\n      \"id\": \"test_1\",\n      \"name\": \"reachability - Basic Validation\", \n      \"description\": \"Comprehensive reachability test covering fundamental system aspects\",\n      \"test_type\": \"reachability\",\n      \"priority\": \"high\",\n      \"expected_result\": \"System demonstrates optimal reachability characteristics\",\n      \"success_criteria\": \"All reachability metrics within acceptable thresholds\",\n      \"failure_indicators\": \"Any reachability metric exceeds critical thresholds\"\n    },\n    {\n      \"id\": \"test_2\",\n      \"name\": \"reachability - Resource Impact Analysis\", \n      \"description\": \"Evaluate reachability behavior under current resource constraints\",\n      \"test_type\": \"reachability\",\n      \"priority\": \"high\",\n      \"expected_result\": \"System maintains reachability performance despite resource limitations\",\n      \"success_criteria\": \"Resource usage remains stable while reachability metrics are optimal\",\n      \"failure_indicators\": \"Resource constraints negatively impact reachability performance\"\n    },\n    {\n      \"id\": \"test_3\",\n      \"name\": \"reachability - Load Pattern Validation\", \n      \"description\": \"Validate reachability characteristics under current load pattern\",\n      \"test_type\": \"reachability\",\n      \"priority\": \"high\",\n      \"expected_result\": \"System handles current load pattern with optimal reachability\",\n      \"success_criteria\": \"reachability remains consistent throughout load pattern\",\n      \"failure_indicators\": \"Load pattern causes reachability degradation\"\n    },\n    {\n      \"id\": \"test_4\",\n      \"name\": \"reachability - Infrastructure Validation\", \n      \"description\": \"Comprehensive reachability validation across all infrastructure components\",\n      \"test_type\": \"reachability\",\n      \"priority\": \"high\",\n      \"expected_result\": \"All infrastructure components demonstrate optimal reachability\",\n      \"success_criteria\": \"Pods, services, and network components show consistent reachability\",\n      \"failure_indicators\": \"Infrastructure components show inconsistent reachability behavior\"\n    }\n  ],\n  \"kubectl_commands\": [\n    {\n      \"id\": \"cmd_1\",\n      \"description\": \"Comprehensive pod status and health validation\",\n      \"command\": \"kubectl get pods -n default | grep kube-znn | head -10\",\n      \"expected_output\": \"All pods running and ready with proper resource allocation\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"All pods show Running status with Ready condition\", \n      \"failure_indicators\": \"Any pod shows Pending, Error, CrashLoopBackOff, or resource issues\",\n      \"oracle_validation\": \"Pod status and resource allocation validation\"\n    },\n    {\n      \"id\": \"cmd_2\",\n      \"description\": \"Service discovery and endpoint connectivity validation\",\n      \"command\": \"kubectl get svc -n default | grep kube-znn\",\n      \"expected_output\": \"Valid cluster IP and active endpoints\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"Service has valid cluster IP with active endpoint subsets\",\n      \"failure_indicators\": \"Service has no cluster IP, pending status, or empty endpoints\",\n      \"oracle_validation\": \"Service discovery and endpoint connectivity validation\"\n    },\n    {\n      \"id\": \"cmd_3\",\n      \"description\": \"Resource utilization and performance metrics analysis\",\n      \"command\": \"kubectl top pods -n default | grep kube-znn\",\n      \"expected_output\": \"CPU and memory usage metrics for all containers\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"Pods show optimal resource utilization within defined limits\",\n      \"failure_indicators\": \"Pods show excessive CPU/memory usage or resource contention\",\n      \"oracle_validation\": \"Resource utilization and performance validation\"\n    },\n    {\n      \"id\": \"cmd_4\",\n      \"description\": \"Comprehensive log analysis for system health\",\n      \"command\": \"kubectl logs -n default $(kubectl get pods -n default | grep kube-znn | head -1 | awk '{print $1}') --tail=100 --timestamps\",\n      \"expected_output\": \"Clean logs with proper timestamps and no critical errors\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"No ERROR, FATAL, or critical warnings in recent logs\",\n      \"failure_indicators\": \"Critical errors, warnings, or abnormal log patterns detected\",\n      \"oracle_validation\": \"System health and log analysis validation\"\n    },\n    {\n      \"id\": \"cmd_5\",\n      \"description\": \"Service endpoint accessibility and response validation\",\n      \"command\": \"kubectl exec -n default $(kubectl get pods -n default | grep kube-znn | head -1 | awk '{print $1}') -- curl -s -o /dev/null -w '%{http_code} %{time_total}' http://localhost:80/news.php\",\n      \"expected_output\": \"200 with acceptable response time\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"HTTP 200 response with response time within acceptable thresholds\",\n      \"failure_indicators\": \"Non-200 HTTP response, connection failure, or excessive response time\",\n      \"oracle_validation\": \"Service endpoint accessibility and performance validation\"\n    },\n    {\n      \"id\": \"cmd_6\",\n      \"description\": \"Network policy and connectivity validation\",\n      \"command\": \"kubectl get networkpolicies -n default && kubectl get pods -n default | grep kube-znn | awk '{print $6}'\",\n      \"expected_output\": \"Network policies and pod IP addresses\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"Pods have valid IP addresses and network policies are properly configured\",\n      \"failure_indicators\": \"Pods have no IP addresses or network policies are misconfigured\",\n      \"oracle_validation\": \"Network connectivity and policy validation\"\n    },\n    {\n      \"id\": \"cmd_7\",\n      \"description\": \"Resource limits and requests validation\",\n      \"command\": \"kubectl get pods -n default | grep kube-znn | head -1 | awk '{print $1}' | xargs -I {} kubectl describe pod -n default {} | grep -A 10 'Limits\\|Requests'\",\n      \"expected_output\": \"Resource limits and requests configuration\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"Resource limits and requests are properly configured and within acceptable ranges\",\n      \"failure_indicators\": \"Resource limits too low, requests too high, or misconfigured resource allocation\",\n      \"oracle_validation\": \"Resource configuration validation\"\n    }\n  ]\n}\n\nReturn only valid JSON.",
        "enhanced_prompt": "\nEXPERIMENT_ID: experiment_reachability_1761569381\nRUN_ID: unknown\nTIMESTAMP: 20251027_124943_166547\nUNIQUE_SESSION: experiment_reachability_1761569381_unknown_20251027_124943_166547\n\nGenerate test plan for kube-znn service based on system metrics.\n\nMETRICS:\n- CPU: 1.5% (within healthy range (<25%))\n- Memory: 4.0% (within healthy range (<30%))  \n- Response Time: 2500.0ms (within critical range (>70ms))\n- Error Rate: 0.0%\n- Throughput: 0.0 req/s\n- Network Latency: 0.0ms\n\nLOAD:\n- Users: 30, Rate: 3.0 req/s, Duration: 120s\n- Pattern: burst (Burst pattern)\n- Current: Moderate load\n\nINFRASTRUCTURE:\n- Pods: 3 active, 0 pending, 0 failed\n- Resources: 6 CPUs, 6GB RAM\n- Target: 5 pods, Quality: 600\n\nANALYSIS:\n- Status: operational\n- Test Type: reachability\n- Priority: high\n- Justification: The primary concern in this situation is reachability due to the high number of failed pods (15) and the extremely high error rate (95%). There are currently no users connecting, which meets the conditions for the priority 1 reachability test. The system is unable to be reached, and there is a potential network latency issue or pods not responding, which further supports this recommendation.\n\nREQUIREMENT: Generate tests ONLY for \"reachability\" type.\n\nTEST GUIDELINES:\n- response_time: latency, performance, resource efficiency, network tests, pod metrics, service endpoints, resource monitoring, CPU/memory usage, response time validation, endpoint accessibility\n- reachability: connectivity, availability, pod status, health checks, service discovery, network policies, pod readiness, service endpoints, DNS resolution, port accessibility\n- load: capacity, scalability, stress, resource limits, throughput, horizontal pod autoscaling, resource utilization, performance degradation, bottleneck identification\n\nGenerate comprehensive test suites based on system state. Create thorough kubectl commands that cover all aspects of the recommended test type for complete system validation.\n\nJSON FORMAT:\n{\n  \"test_cases\": [\n    {\n      \"id\": \"test_1\",\n      \"name\": \"reachability - Basic Validation\", \n      \"description\": \"Comprehensive reachability test covering fundamental system aspects\",\n      \"test_type\": \"reachability\",\n      \"priority\": \"high\",\n      \"expected_result\": \"System demonstrates optimal reachability characteristics\",\n      \"success_criteria\": \"All reachability metrics within acceptable thresholds\",\n      \"failure_indicators\": \"Any reachability metric exceeds critical thresholds\"\n    },\n    {\n      \"id\": \"test_2\",\n      \"name\": \"reachability - Resource Impact Analysis\", \n      \"description\": \"Evaluate reachability behavior under current resource constraints\",\n      \"test_type\": \"reachability\",\n      \"priority\": \"high\",\n      \"expected_result\": \"System maintains reachability performance despite resource limitations\",\n      \"success_criteria\": \"Resource usage remains stable while reachability metrics are optimal\",\n      \"failure_indicators\": \"Resource constraints negatively impact reachability performance\"\n    },\n    {\n      \"id\": \"test_3\",\n      \"name\": \"reachability - Load Pattern Validation\", \n      \"description\": \"Validate reachability characteristics under current load pattern\",\n      \"test_type\": \"reachability\",\n      \"priority\": \"high\",\n      \"expected_result\": \"System handles current load pattern with optimal reachability\",\n      \"success_criteria\": \"reachability remains consistent throughout load pattern\",\n      \"failure_indicators\": \"Load pattern causes reachability degradation\"\n    },\n    {\n      \"id\": \"test_4\",\n      \"name\": \"reachability - Infrastructure Validation\", \n      \"description\": \"Comprehensive reachability validation across all infrastructure components\",\n      \"test_type\": \"reachability\",\n      \"priority\": \"high\",\n      \"expected_result\": \"All infrastructure components demonstrate optimal reachability\",\n      \"success_criteria\": \"Pods, services, and network components show consistent reachability\",\n      \"failure_indicators\": \"Infrastructure components show inconsistent reachability behavior\"\n    }\n  ],\n  \"kubectl_commands\": [\n    {\n      \"id\": \"cmd_1\",\n      \"description\": \"Comprehensive pod status and health validation\",\n      \"command\": \"kubectl get pods -n default | grep kube-znn | head -10\",\n      \"expected_output\": \"All pods running and ready with proper resource allocation\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"All pods show Running status with Ready condition\", \n      \"failure_indicators\": \"Any pod shows Pending, Error, CrashLoopBackOff, or resource issues\",\n      \"oracle_validation\": \"Pod status and resource allocation validation\"\n    },\n    {\n      \"id\": \"cmd_2\",\n      \"description\": \"Service discovery and endpoint connectivity validation\",\n      \"command\": \"kubectl get svc -n default | grep kube-znn\",\n      \"expected_output\": \"Valid cluster IP and active endpoints\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"Service has valid cluster IP with active endpoint subsets\",\n      \"failure_indicators\": \"Service has no cluster IP, pending status, or empty endpoints\",\n      \"oracle_validation\": \"Service discovery and endpoint connectivity validation\"\n    },\n    {\n      \"id\": \"cmd_3\",\n      \"description\": \"Resource utilization and performance metrics analysis\",\n      \"command\": \"kubectl top pods -n default | grep kube-znn\",\n      \"expected_output\": \"CPU and memory usage metrics for all containers\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"Pods show optimal resource utilization within defined limits\",\n      \"failure_indicators\": \"Pods show excessive CPU/memory usage or resource contention\",\n      \"oracle_validation\": \"Resource utilization and performance validation\"\n    },\n    {\n      \"id\": \"cmd_4\",\n      \"description\": \"Comprehensive log analysis for system health\",\n      \"command\": \"kubectl logs -n default $(kubectl get pods -n default | grep kube-znn | head -1 | awk '{print $1}') --tail=100 --timestamps\",\n      \"expected_output\": \"Clean logs with proper timestamps and no critical errors\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"No ERROR, FATAL, or critical warnings in recent logs\",\n      \"failure_indicators\": \"Critical errors, warnings, or abnormal log patterns detected\",\n      \"oracle_validation\": \"System health and log analysis validation\"\n    },\n    {\n      \"id\": \"cmd_5\",\n      \"description\": \"Service endpoint accessibility and response validation\",\n      \"command\": \"kubectl exec -n default $(kubectl get pods -n default | grep kube-znn | head -1 | awk '{print $1}') -- curl -s -o /dev/null -w '%{http_code} %{time_total}' http://localhost:80/news.php\",\n      \"expected_output\": \"200 with acceptable response time\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"HTTP 200 response with response time within acceptable thresholds\",\n      \"failure_indicators\": \"Non-200 HTTP response, connection failure, or excessive response time\",\n      \"oracle_validation\": \"Service endpoint accessibility and performance validation\"\n    },\n    {\n      \"id\": \"cmd_6\",\n      \"description\": \"Network policy and connectivity validation\",\n      \"command\": \"kubectl get networkpolicies -n default && kubectl get pods -n default | grep kube-znn | awk '{print $6}'\",\n      \"expected_output\": \"Network policies and pod IP addresses\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"Pods have valid IP addresses and network policies are properly configured\",\n      \"failure_indicators\": \"Pods have no IP addresses or network policies are misconfigured\",\n      \"oracle_validation\": \"Network connectivity and policy validation\"\n    },\n    {\n      \"id\": \"cmd_7\",\n      \"description\": \"Resource limits and requests validation\",\n      \"command\": \"kubectl get pods -n default | grep kube-znn | head -1 | awk '{print $1}' | xargs -I {} kubectl describe pod -n default {} | grep -A 10 'Limits\\|Requests'\",\n      \"expected_output\": \"Resource limits and requests configuration\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"Resource limits and requests are properly configured and within acceptable ranges\",\n      \"failure_indicators\": \"Resource limits too low, requests too high, or misconfigured resource allocation\",\n      \"oracle_validation\": \"Resource configuration validation\"\n    }\n  ]\n}\n\nReturn only valid JSON.\n\nIMPORTANTE: Esta \u00e9 uma requisi\u00e7\u00e3o \u00fanica para o experimento experiment_reachability_1761569381, run unknown. \nN\u00c3O reutilize dados de experimentos anteriores. Gere uma resposta espec\u00edfica para este momento.\n",
        "response": " {\n  \"test_cases\": [\n    {\n      \"id\": \"test_1\",\n      \"name\": \"reachability - Basic Validation\",\n      \"description\": \"Comprehensive reachability test covering fundamental system aspects\",\n      \"test_type\": \"reachability\",\n      \"priority\": \"high\",\n      \"expected_result\": \"System demonstrates optimal reachability characteristics\",\n      \"success_criteria\": \"All reachability metrics within acceptable thresholds\",\n      \"failure_indicators\": \"Any reachability metric exceeds critical thresholds\"\n    },\n    {\n      \"id\": \"test_2\",\n      \"name\": \"reachability - Resource Impact Analysis\",\n      \"description\": \"Evaluate reachability behavior under current resource constraints\",\n      \"test_type\": \"reachability\",\n      \"priority\": \"high\",\n      \"expected_result\": \"System maintains reachability performance despite resource limitations\",\n      \"success_criteria\": \"Resource usage remains stable while reachability metrics are optimal\",\n      \"failure_indicators\": \"Resource constraints negatively impact reachability performance\"\n    },\n    {\n      \"id\": \"test_3\",\n      \"name\": \"reachability - Load Pattern Validation\",\n      \"description\": \"Validate reachability characteristics under current load pattern\",\n      \"test_type\": \"reachability\",\n      \"priority\": \"high\",\n      \"expected_result\": \"System handles current load pattern with optimal reachability\",\n      \"success_criteria\": \"reachability remains consistent throughout load pattern\",\n      \"failure_indicators\": \"Load pattern causes reachability degradation\"\n    },\n    {\n      \"id\": \"test_4\",\n      \"name\": \"reachability - Infrastructure Validation\",\n      \"description\": \"Comprehensive reachability validation across all infrastructure components\",\n      \"test_type\": \"reachability\",\n      \"priority\": \"high\",\n      \"expected_result\": \"All infrastructure components demonstrate optimal reachability\",\n      \"success_criteria\": \"Pods, services, and network components show consistent reachability\",\n      \"failure_indicators\": \"Infrastructure components show inconsistent reachability behavior\"\n    }\n  ],\n  \"kubectl_commands\": [\n    {\n      \"id\": \"cmd_1\",\n      \"description\": \"Comprehensive pod status and health validation\",\n      \"command\": \"kubectl get pods -n default | grep kube-znn | head -10\",\n      \"expected_output\": \"All pods running and ready with proper resource allocation\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"All pods show Running status with Ready condition\",\n      \"failure_indicators\": \"Any pod shows Pending, Error, CrashLoopBackOff, or resource issues\"\n    },\n    {\n      \"id\": \"cmd_2\",\n      \"description\": \"Service discovery and endpoint connectivity validation\",\n      \"command\": \"kubectl get svc -n default | grep kube-znn\",\n      \"expected_output\": \"Valid cluster IP and active endpoints\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"Service has valid cluster IP with active endpoint subsets\",\n      \"failure_indicators\": \"Service has no cluster IP, pending status, or empty endpoints\"\n    },\n    {\n      \"id\": \"cmd_3\",\n      \"description\": \"Resource utilization and performance metrics analysis\",\n      \"command\": \"kubectl top pods -n default | grep kube-znn\",\n      \"expected_output\": \"CPU and memory usage metrics for all containers\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"Pods show optimal resource utilization within defined limits\",\n      \"failure_indicators\": \"Pods show excessive CPU/memory usage or resource contention\"\n    },\n    {\n      \"id\": \"cmd_4\",\n      \"description\": \"Comprehensive log analysis for system health\",\n      \"command\": \"kubectl logs -n default $(kubectl get pods -n default | grep kube-znn | head -1 | awk '{print $1}') --tail=100 --timestamps\",\n      \"expected_output\": \"Clean logs with proper timestamps and no critical errors\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"No ERROR, FATAL, or critical warnings in recent logs\",\n      \"failure_indicators\": \"Critical errors, warnings, or abnormal log patterns detected\"\n    },\n    {\n      \"id\": \"cmd_5\",\n      \"description\": \"Service endpoint accessibility and response validation\",\n      \"command\": \"kubectl exec -n default $(kubectl get pods -n default | grep kube-znn | head -1 | awk '{print $1}') -- curl -s -o /dev/null -w '%{http_code} %{time_total}' http://localhost:80/news.php\",\n      \"expected_output\": \"200 with acceptable response time\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"HTTP 200 response with response time within acceptable thresholds\",\n      \"failure_indicators\": \"Non-200 HTTP response, connection failure, or excessive response time\"\n    },\n    {\n      \"id\": \"cmd_6\",\n      \"description\": \"Network policy and connectivity validation\",\n      \"command\": \"kubectl get networkpolicies -n default && kubectl get pods -n default | grep kube-znn | awk '{print $6}'\",\n      \"expected_output\": \"Network policies and pod IP addresses\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"Pods have valid IP addresses and network policies are properly configured\",\n      \"failure_indicators\": \"Pods have no IP addresses or network policies are misconfigured\"\n    }\n  ]\n}\n\nThis JSON response is tailored to the specific experiment with ID experiment\\_reachability\\_1761569381 and RUN\\_ID unknown. The test cases and kubectl commands are generated based on the provided metrics, load, and infrastructure details, focusing on reachability test type as requested. Please note that this JSON response is created solely for this experiment and does not reuse data from previous experiments.",
        "prompt_type": "test_generation",
        "experiment_id": "experiment_reachability_1761569381",
        "run_id": "unknown"
      },
      "interaction_complete": true
    }
  ],
  "llm_responses": [
    {
      "prompt": "Generate test plan for kube-znn service based on system metrics.\n\nMETRICS:\n- CPU: 1.5% (within healthy range (<25%))\n- Memory: 4.0% (within healthy range (<30%))  \n- Response Time: 2500.0ms (within critical range (>70ms))\n- Error Rate: 0.0%\n- Throughput: 0.0 req/s\n- Network Latency: 0.0ms\n\nLOAD:\n- Users: 30, Rate: 3.0 req/s, Duration: 120s\n- Pattern: burst (Burst pattern)\n- Current: Moderate load\n\nINFRASTRUCTURE:\n- Pods: 3 active, 0 pending, 0 failed\n- Resources: 6 CPUs, 6GB RAM\n- Target: 5 pods, Quality: 600\n\nANALYSIS:\n- Status: operational\n- Test Type: reachability\n- Priority: high\n- Justification: The primary concern in this situation is reachability due to the high number of failed pods (15) and the extremely high error rate (95%). There are currently no users connecting, which meets the conditions for the priority 1 reachability test. The system is unable to be reached, and there is a potential network latency issue or pods not responding, which further supports this recommendation.\n\nREQUIREMENT: Generate tests ONLY for \"reachability\" type.\n\nTEST GUIDELINES:\n- response_time: latency, performance, resource efficiency, network tests, pod metrics, service endpoints, resource monitoring, CPU/memory usage, response time validation, endpoint accessibility\n- reachability: connectivity, availability, pod status, health checks, service discovery, network policies, pod readiness, service endpoints, DNS resolution, port accessibility\n- load: capacity, scalability, stress, resource limits, throughput, horizontal pod autoscaling, resource utilization, performance degradation, bottleneck identification\n\nGenerate comprehensive test suites based on system state. Create thorough kubectl commands that cover all aspects of the recommended test type for complete system validation.\n\nJSON FORMAT:\n{\n  \"test_cases\": [\n    {\n      \"id\": \"test_1\",\n      \"name\": \"reachability - Basic Validation\", \n      \"description\": \"Comprehensive reachability test covering fundamental system aspects\",\n      \"test_type\": \"reachability\",\n      \"priority\": \"high\",\n      \"expected_result\": \"System demonstrates optimal reachability characteristics\",\n      \"success_criteria\": \"All reachability metrics within acceptable thresholds\",\n      \"failure_indicators\": \"Any reachability metric exceeds critical thresholds\"\n    },\n    {\n      \"id\": \"test_2\",\n      \"name\": \"reachability - Resource Impact Analysis\", \n      \"description\": \"Evaluate reachability behavior under current resource constraints\",\n      \"test_type\": \"reachability\",\n      \"priority\": \"high\",\n      \"expected_result\": \"System maintains reachability performance despite resource limitations\",\n      \"success_criteria\": \"Resource usage remains stable while reachability metrics are optimal\",\n      \"failure_indicators\": \"Resource constraints negatively impact reachability performance\"\n    },\n    {\n      \"id\": \"test_3\",\n      \"name\": \"reachability - Load Pattern Validation\", \n      \"description\": \"Validate reachability characteristics under current load pattern\",\n      \"test_type\": \"reachability\",\n      \"priority\": \"high\",\n      \"expected_result\": \"System handles current load pattern with optimal reachability\",\n      \"success_criteria\": \"reachability remains consistent throughout load pattern\",\n      \"failure_indicators\": \"Load pattern causes reachability degradation\"\n    },\n    {\n      \"id\": \"test_4\",\n      \"name\": \"reachability - Infrastructure Validation\", \n      \"description\": \"Comprehensive reachability validation across all infrastructure components\",\n      \"test_type\": \"reachability\",\n      \"priority\": \"high\",\n      \"expected_result\": \"All infrastructure components demonstrate optimal reachability\",\n      \"success_criteria\": \"Pods, services, and network components show consistent reachability\",\n      \"failure_indicators\": \"Infrastructure components show inconsistent reachability behavior\"\n    }\n  ],\n  \"kubectl_commands\": [\n    {\n      \"id\": \"cmd_1\",\n      \"description\": \"Comprehensive pod status and health validation\",\n      \"command\": \"kubectl get pods -n default | grep kube-znn | head -10\",\n      \"expected_output\": \"All pods running and ready with proper resource allocation\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"All pods show Running status with Ready condition\", \n      \"failure_indicators\": \"Any pod shows Pending, Error, CrashLoopBackOff, or resource issues\",\n      \"oracle_validation\": \"Pod status and resource allocation validation\"\n    },\n    {\n      \"id\": \"cmd_2\",\n      \"description\": \"Service discovery and endpoint connectivity validation\",\n      \"command\": \"kubectl get svc -n default | grep kube-znn\",\n      \"expected_output\": \"Valid cluster IP and active endpoints\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"Service has valid cluster IP with active endpoint subsets\",\n      \"failure_indicators\": \"Service has no cluster IP, pending status, or empty endpoints\",\n      \"oracle_validation\": \"Service discovery and endpoint connectivity validation\"\n    },\n    {\n      \"id\": \"cmd_3\",\n      \"description\": \"Resource utilization and performance metrics analysis\",\n      \"command\": \"kubectl top pods -n default | grep kube-znn\",\n      \"expected_output\": \"CPU and memory usage metrics for all containers\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"Pods show optimal resource utilization within defined limits\",\n      \"failure_indicators\": \"Pods show excessive CPU/memory usage or resource contention\",\n      \"oracle_validation\": \"Resource utilization and performance validation\"\n    },\n    {\n      \"id\": \"cmd_4\",\n      \"description\": \"Comprehensive log analysis for system health\",\n      \"command\": \"kubectl logs -n default $(kubectl get pods -n default | grep kube-znn | head -1 | awk '{print $1}') --tail=100 --timestamps\",\n      \"expected_output\": \"Clean logs with proper timestamps and no critical errors\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"No ERROR, FATAL, or critical warnings in recent logs\",\n      \"failure_indicators\": \"Critical errors, warnings, or abnormal log patterns detected\",\n      \"oracle_validation\": \"System health and log analysis validation\"\n    },\n    {\n      \"id\": \"cmd_5\",\n      \"description\": \"Service endpoint accessibility and response validation\",\n      \"command\": \"kubectl exec -n default $(kubectl get pods -n default | grep kube-znn | head -1 | awk '{print $1}') -- curl -s -o /dev/null -w '%{http_code} %{time_total}' http://localhost:80/news.php\",\n      \"expected_output\": \"200 with acceptable response time\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"HTTP 200 response with response time within acceptable thresholds\",\n      \"failure_indicators\": \"Non-200 HTTP response, connection failure, or excessive response time\",\n      \"oracle_validation\": \"Service endpoint accessibility and performance validation\"\n    },\n    {\n      \"id\": \"cmd_6\",\n      \"description\": \"Network policy and connectivity validation\",\n      \"command\": \"kubectl get networkpolicies -n default && kubectl get pods -n default | grep kube-znn | awk '{print $6}'\",\n      \"expected_output\": \"Network policies and pod IP addresses\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"Pods have valid IP addresses and network policies are properly configured\",\n      \"failure_indicators\": \"Pods have no IP addresses or network policies are misconfigured\",\n      \"oracle_validation\": \"Network connectivity and policy validation\"\n    },\n    {\n      \"id\": \"cmd_7\",\n      \"description\": \"Resource limits and requests validation\",\n      \"command\": \"kubectl get pods -n default | grep kube-znn | head -1 | awk '{print $1}' | xargs -I {} kubectl describe pod -n default {} | grep -A 10 'Limits\\|Requests'\",\n      \"expected_output\": \"Resource limits and requests configuration\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"Resource limits and requests are properly configured and within acceptable ranges\",\n      \"failure_indicators\": \"Resource limits too low, requests too high, or misconfigured resource allocation\",\n      \"oracle_validation\": \"Resource configuration validation\"\n    }\n  ]\n}\n\nReturn only valid JSON.",
      "test_plan": {
        "test_cases": [
          {
            "id": "test_1",
            "name": "reachability - Basic Validation",
            "description": "Comprehensive reachability test covering fundamental system aspects",
            "test_type": "reachability",
            "priority": "high",
            "expected_result": "System demonstrates optimal reachability characteristics",
            "success_criteria": "All reachability metrics within acceptable thresholds",
            "failure_indicators": "Any reachability metric exceeds critical thresholds"
          },
          {
            "id": "test_2",
            "name": "reachability - Resource Impact Analysis",
            "description": "Evaluate reachability behavior under current resource constraints",
            "test_type": "reachability",
            "priority": "high",
            "expected_result": "System maintains reachability performance despite resource limitations",
            "success_criteria": "Resource usage remains stable while reachability metrics are optimal",
            "failure_indicators": "Resource constraints negatively impact reachability performance"
          },
          {
            "id": "test_3",
            "name": "reachability - Load Pattern Validation",
            "description": "Validate reachability characteristics under current load pattern",
            "test_type": "reachability",
            "priority": "high",
            "expected_result": "System handles current load pattern with optimal reachability",
            "success_criteria": "reachability remains consistent throughout load pattern",
            "failure_indicators": "Load pattern causes reachability degradation"
          },
          {
            "id": "test_4",
            "name": "reachability - Infrastructure Validation",
            "description": "Comprehensive reachability validation across all infrastructure components",
            "test_type": "reachability",
            "priority": "high",
            "expected_result": "All infrastructure components demonstrate optimal reachability",
            "success_criteria": "Pods, services, and network components show consistent reachability",
            "failure_indicators": "Infrastructure components show inconsistent reachability behavior"
          }
        ],
        "kubectl_commands": [
          {
            "id": "cmd_1",
            "description": "Comprehensive pod status and health validation",
            "command": "kubectl get pods -n default | grep kube-znn | head -10",
            "expected_output": "All pods running and ready with proper resource allocation",
            "test_type": "reachability",
            "success_criteria": "All pods show Running status with Ready condition",
            "failure_indicators": "Any pod shows Pending, Error, CrashLoopBackOff, or resource issues"
          },
          {
            "id": "cmd_2",
            "description": "Service discovery and endpoint connectivity validation",
            "command": "kubectl get svc -n default | grep kube-znn",
            "expected_output": "Valid cluster IP and active endpoints",
            "test_type": "reachability",
            "success_criteria": "Service has valid cluster IP with active endpoint subsets",
            "failure_indicators": "Service has no cluster IP, pending status, or empty endpoints"
          },
          {
            "id": "cmd_3",
            "description": "Resource utilization and performance metrics analysis",
            "command": "kubectl top pods -n default | grep kube-znn",
            "expected_output": "CPU and memory usage metrics for all containers",
            "test_type": "reachability",
            "success_criteria": "Pods show optimal resource utilization within defined limits",
            "failure_indicators": "Pods show excessive CPU/memory usage or resource contention"
          },
          {
            "id": "cmd_4",
            "description": "Comprehensive log analysis for system health",
            "command": "kubectl logs -n default $(kubectl get pods -n default | grep kube-znn | head -1 | awk '{print $1}') --tail=100 --timestamps",
            "expected_output": "Clean logs with proper timestamps and no critical errors",
            "test_type": "reachability",
            "success_criteria": "No ERROR, FATAL, or critical warnings in recent logs",
            "failure_indicators": "Critical errors, warnings, or abnormal log patterns detected"
          },
          {
            "id": "cmd_5",
            "description": "Service endpoint accessibility and response validation",
            "command": "kubectl exec -n default $(kubectl get pods -n default | grep kube-znn | head -1 | awk '{print $1}') -- curl -s -o /dev/null -w '%{http_code} %{time_total}' http://localhost:80/news.php",
            "expected_output": "200 with acceptable response time",
            "test_type": "reachability",
            "success_criteria": "HTTP 200 response with response time within acceptable thresholds",
            "failure_indicators": "Non-200 HTTP response, connection failure, or excessive response time"
          },
          {
            "id": "cmd_6",
            "description": "Network policy and connectivity validation",
            "command": "kubectl get networkpolicies -n default && kubectl get pods -n default | grep kube-znn | awk '{print $6}'",
            "expected_output": "Network policies and pod IP addresses",
            "test_type": "reachability",
            "success_criteria": "Pods have valid IP addresses and network policies are properly configured",
            "failure_indicators": "Pods have no IP addresses or network policies are misconfigured"
          }
        ]
      },
      "kubectl_commands": [
        {
          "id": "cmd_1",
          "description": "Comprehensive pod status and health validation",
          "command": "kubectl get pods -n default | grep kube-znn | head -10",
          "expected_output": "All pods running and ready with proper resource allocation",
          "test_type": "reachability",
          "success_criteria": "All pods show Running status with Ready condition",
          "failure_indicators": "Any pod shows Pending, Error, CrashLoopBackOff, or resource issues"
        },
        {
          "id": "cmd_2",
          "description": "Service discovery and endpoint connectivity validation",
          "command": "kubectl get svc -n default | grep kube-znn",
          "expected_output": "Valid cluster IP and active endpoints",
          "test_type": "reachability",
          "success_criteria": "Service has valid cluster IP with active endpoint subsets",
          "failure_indicators": "Service has no cluster IP, pending status, or empty endpoints"
        },
        {
          "id": "cmd_3",
          "description": "Resource utilization and performance metrics analysis",
          "command": "kubectl top pods -n default | grep kube-znn",
          "expected_output": "CPU and memory usage metrics for all containers",
          "test_type": "reachability",
          "success_criteria": "Pods show optimal resource utilization within defined limits",
          "failure_indicators": "Pods show excessive CPU/memory usage or resource contention"
        },
        {
          "id": "cmd_4",
          "description": "Comprehensive log analysis for system health",
          "command": "kubectl logs -n default $(kubectl get pods -n default | grep kube-znn | head -1 | awk '{print $1}') --tail=100 --timestamps",
          "expected_output": "Clean logs with proper timestamps and no critical errors",
          "test_type": "reachability",
          "success_criteria": "No ERROR, FATAL, or critical warnings in recent logs",
          "failure_indicators": "Critical errors, warnings, or abnormal log patterns detected"
        },
        {
          "id": "cmd_5",
          "description": "Service endpoint accessibility and response validation",
          "command": "kubectl exec -n default $(kubectl get pods -n default | grep kube-znn | head -1 | awk '{print $1}') -- curl -s -o /dev/null -w '%{http_code} %{time_total}' http://localhost:80/news.php",
          "expected_output": "200 with acceptable response time",
          "test_type": "reachability",
          "success_criteria": "HTTP 200 response with response time within acceptable thresholds",
          "failure_indicators": "Non-200 HTTP response, connection failure, or excessive response time"
        },
        {
          "id": "cmd_6",
          "description": "Network policy and connectivity validation",
          "command": "kubectl get networkpolicies -n default && kubectl get pods -n default | grep kube-znn | awk '{print $6}'",
          "expected_output": "Network policies and pod IP addresses",
          "test_type": "reachability",
          "success_criteria": "Pods have valid IP addresses and network policies are properly configured",
          "failure_indicators": "Pods have no IP addresses or network policies are misconfigured"
        }
      ],
      "test_cases": [
        {
          "id": "test_1",
          "name": "reachability - Basic Validation",
          "description": "Comprehensive reachability test covering fundamental system aspects",
          "test_type": "reachability",
          "priority": "high",
          "expected_result": "System demonstrates optimal reachability characteristics",
          "success_criteria": "All reachability metrics within acceptable thresholds",
          "failure_indicators": "Any reachability metric exceeds critical thresholds"
        },
        {
          "id": "test_2",
          "name": "reachability - Resource Impact Analysis",
          "description": "Evaluate reachability behavior under current resource constraints",
          "test_type": "reachability",
          "priority": "high",
          "expected_result": "System maintains reachability performance despite resource limitations",
          "success_criteria": "Resource usage remains stable while reachability metrics are optimal",
          "failure_indicators": "Resource constraints negatively impact reachability performance"
        },
        {
          "id": "test_3",
          "name": "reachability - Load Pattern Validation",
          "description": "Validate reachability characteristics under current load pattern",
          "test_type": "reachability",
          "priority": "high",
          "expected_result": "System handles current load pattern with optimal reachability",
          "success_criteria": "reachability remains consistent throughout load pattern",
          "failure_indicators": "Load pattern causes reachability degradation"
        },
        {
          "id": "test_4",
          "name": "reachability - Infrastructure Validation",
          "description": "Comprehensive reachability validation across all infrastructure components",
          "test_type": "reachability",
          "priority": "high",
          "expected_result": "All infrastructure components demonstrate optimal reachability",
          "success_criteria": "Pods, services, and network components show consistent reachability",
          "failure_indicators": "Infrastructure components show inconsistent reachability behavior"
        }
      ]
    },
    {
      "request": {
        "context": {
          "experiment_id": "experiment_reachability_1761569381",
          "used_system_cpu": 1.5,
          "used_system_memory": 4.0,
          "median_response_time": 2500.0,
          "concurrent_users": 30,
          "request_rate": 3.0,
          "session_duration": 120,
          "load_pattern": "burst",
          "load_pattern_description": "Burst pattern",
          "current_load_description": "Moderate load",
          "target_system_pods": 5,
          "quality_of_media": 600,
          "target_system_architecture": "Microservices",
          "allocated_cpus": 6,
          "allocated_memory": 6,
          "error_rate": 0.0,
          "throughput": 0.0,
          "network_latency": 0.0,
          "active_pods": 3,
          "pending_pods": 0,
          "failed_pods": 0,
          "system_status": "operational",
          "cpu_range_description": "within healthy range (<25%)",
          "memory_range_description": "within healthy range (<30%)",
          "response_time_range_description": "within critical range (>70ms)",
          "recommended_test_type": "reachability",
          "test_justification": "The primary concern in this situation is reachability due to the high number of failed pods (15) and the extremely high error rate (95%). There are currently no users connecting, which meets the conditions for the priority 1 reachability test. The system is unable to be reached, and there is a potential network latency issue or pods not responding, which further supports this recommendation.",
          "test_priority": "high"
        },
        "category": "planner_v10_3",
        "prompt": "Generate test plan for kube-znn service based on system metrics.\n\nMETRICS:\n- CPU: 1.5% (within healthy range (<25%))\n- Memory: 4.0% (within healthy range (<30%))  \n- Response Time: 2500.0ms (within critical range (>70ms))\n- Error Rate: 0.0%\n- Throughput: 0.0 req/s\n- Network Latency: 0.0ms\n\nLOAD:\n- Users: 30, Rate: 3.0 req/s, Duration: 120s\n- Pattern: burst (Burst pattern)\n- Current: Moderate load\n\nINFRASTRUCTURE:\n- Pods: 3 active, 0 pending, 0 failed\n- Resources: 6 CPUs, 6GB RAM\n- Target: 5 pods, Quality: 600\n\nANALYSIS:\n- Status: operational\n- Test Type: reachability\n- Priority: high\n- Justification: The primary concern in this situation is reachability due to the high number of failed pods (15) and the extremely high error rate (95%). There are currently no users connecting, which meets the conditions for the priority 1 reachability test. The system is unable to be reached, and there is a potential network latency issue or pods not responding, which further supports this recommendation.\n\nREQUIREMENT: Generate tests ONLY for \"reachability\" type.\n\nTEST GUIDELINES:\n- response_time: latency, performance, resource efficiency, network tests, pod metrics, service endpoints, resource monitoring, CPU/memory usage, response time validation, endpoint accessibility\n- reachability: connectivity, availability, pod status, health checks, service discovery, network policies, pod readiness, service endpoints, DNS resolution, port accessibility\n- load: capacity, scalability, stress, resource limits, throughput, horizontal pod autoscaling, resource utilization, performance degradation, bottleneck identification\n\nGenerate comprehensive test suites based on system state. Create thorough kubectl commands that cover all aspects of the recommended test type for complete system validation.\n\nJSON FORMAT:\n{\n  \"test_cases\": [\n    {\n      \"id\": \"test_1\",\n      \"name\": \"reachability - Basic Validation\", \n      \"description\": \"Comprehensive reachability test covering fundamental system aspects\",\n      \"test_type\": \"reachability\",\n      \"priority\": \"high\",\n      \"expected_result\": \"System demonstrates optimal reachability characteristics\",\n      \"success_criteria\": \"All reachability metrics within acceptable thresholds\",\n      \"failure_indicators\": \"Any reachability metric exceeds critical thresholds\"\n    },\n    {\n      \"id\": \"test_2\",\n      \"name\": \"reachability - Resource Impact Analysis\", \n      \"description\": \"Evaluate reachability behavior under current resource constraints\",\n      \"test_type\": \"reachability\",\n      \"priority\": \"high\",\n      \"expected_result\": \"System maintains reachability performance despite resource limitations\",\n      \"success_criteria\": \"Resource usage remains stable while reachability metrics are optimal\",\n      \"failure_indicators\": \"Resource constraints negatively impact reachability performance\"\n    },\n    {\n      \"id\": \"test_3\",\n      \"name\": \"reachability - Load Pattern Validation\", \n      \"description\": \"Validate reachability characteristics under current load pattern\",\n      \"test_type\": \"reachability\",\n      \"priority\": \"high\",\n      \"expected_result\": \"System handles current load pattern with optimal reachability\",\n      \"success_criteria\": \"reachability remains consistent throughout load pattern\",\n      \"failure_indicators\": \"Load pattern causes reachability degradation\"\n    },\n    {\n      \"id\": \"test_4\",\n      \"name\": \"reachability - Infrastructure Validation\", \n      \"description\": \"Comprehensive reachability validation across all infrastructure components\",\n      \"test_type\": \"reachability\",\n      \"priority\": \"high\",\n      \"expected_result\": \"All infrastructure components demonstrate optimal reachability\",\n      \"success_criteria\": \"Pods, services, and network components show consistent reachability\",\n      \"failure_indicators\": \"Infrastructure components show inconsistent reachability behavior\"\n    }\n  ],\n  \"kubectl_commands\": [\n    {\n      \"id\": \"cmd_1\",\n      \"description\": \"Comprehensive pod status and health validation\",\n      \"command\": \"kubectl get pods -n default | grep kube-znn | head -10\",\n      \"expected_output\": \"All pods running and ready with proper resource allocation\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"All pods show Running status with Ready condition\", \n      \"failure_indicators\": \"Any pod shows Pending, Error, CrashLoopBackOff, or resource issues\",\n      \"oracle_validation\": \"Pod status and resource allocation validation\"\n    },\n    {\n      \"id\": \"cmd_2\",\n      \"description\": \"Service discovery and endpoint connectivity validation\",\n      \"command\": \"kubectl get svc -n default | grep kube-znn\",\n      \"expected_output\": \"Valid cluster IP and active endpoints\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"Service has valid cluster IP with active endpoint subsets\",\n      \"failure_indicators\": \"Service has no cluster IP, pending status, or empty endpoints\",\n      \"oracle_validation\": \"Service discovery and endpoint connectivity validation\"\n    },\n    {\n      \"id\": \"cmd_3\",\n      \"description\": \"Resource utilization and performance metrics analysis\",\n      \"command\": \"kubectl top pods -n default | grep kube-znn\",\n      \"expected_output\": \"CPU and memory usage metrics for all containers\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"Pods show optimal resource utilization within defined limits\",\n      \"failure_indicators\": \"Pods show excessive CPU/memory usage or resource contention\",\n      \"oracle_validation\": \"Resource utilization and performance validation\"\n    },\n    {\n      \"id\": \"cmd_4\",\n      \"description\": \"Comprehensive log analysis for system health\",\n      \"command\": \"kubectl logs -n default $(kubectl get pods -n default | grep kube-znn | head -1 | awk '{print $1}') --tail=100 --timestamps\",\n      \"expected_output\": \"Clean logs with proper timestamps and no critical errors\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"No ERROR, FATAL, or critical warnings in recent logs\",\n      \"failure_indicators\": \"Critical errors, warnings, or abnormal log patterns detected\",\n      \"oracle_validation\": \"System health and log analysis validation\"\n    },\n    {\n      \"id\": \"cmd_5\",\n      \"description\": \"Service endpoint accessibility and response validation\",\n      \"command\": \"kubectl exec -n default $(kubectl get pods -n default | grep kube-znn | head -1 | awk '{print $1}') -- curl -s -o /dev/null -w '%{http_code} %{time_total}' http://localhost:80/news.php\",\n      \"expected_output\": \"200 with acceptable response time\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"HTTP 200 response with response time within acceptable thresholds\",\n      \"failure_indicators\": \"Non-200 HTTP response, connection failure, or excessive response time\",\n      \"oracle_validation\": \"Service endpoint accessibility and performance validation\"\n    },\n    {\n      \"id\": \"cmd_6\",\n      \"description\": \"Network policy and connectivity validation\",\n      \"command\": \"kubectl get networkpolicies -n default && kubectl get pods -n default | grep kube-znn | awk '{print $6}'\",\n      \"expected_output\": \"Network policies and pod IP addresses\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"Pods have valid IP addresses and network policies are properly configured\",\n      \"failure_indicators\": \"Pods have no IP addresses or network policies are misconfigured\",\n      \"oracle_validation\": \"Network connectivity and policy validation\"\n    },\n    {\n      \"id\": \"cmd_7\",\n      \"description\": \"Resource limits and requests validation\",\n      \"command\": \"kubectl get pods -n default | grep kube-znn | head -1 | awk '{print $1}' | xargs -I {} kubectl describe pod -n default {} | grep -A 10 'Limits\\|Requests'\",\n      \"expected_output\": \"Resource limits and requests configuration\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"Resource limits and requests are properly configured and within acceptable ranges\",\n      \"failure_indicators\": \"Resource limits too low, requests too high, or misconfigured resource allocation\",\n      \"oracle_validation\": \"Resource configuration validation\"\n    }\n  ]\n}\n\nReturn only valid JSON.",
        "prompt_type": "test_generation"
      },
      "response": {
        "timestamp": "2025-10-27T12:49:59.630861",
        "unique_session_id": "experiment_reachability_1761569381_unknown_20251027_124943_166547",
        "context": {
          "experiment_id": "experiment_reachability_1761569381",
          "used_system_cpu": 1.5,
          "used_system_memory": 4.0,
          "median_response_time": 2500.0,
          "concurrent_users": 30,
          "request_rate": 3.0,
          "session_duration": 120,
          "load_pattern": "burst",
          "load_pattern_description": "Burst pattern",
          "current_load_description": "Moderate load",
          "target_system_pods": 5,
          "quality_of_media": 600,
          "target_system_architecture": "Microservices",
          "allocated_cpus": 6,
          "allocated_memory": 6,
          "error_rate": 0.0,
          "throughput": 0.0,
          "network_latency": 0.0,
          "active_pods": 3,
          "pending_pods": 0,
          "failed_pods": 0,
          "system_status": "operational",
          "cpu_range_description": "within healthy range (<25%)",
          "memory_range_description": "within healthy range (<30%)",
          "response_time_range_description": "within critical range (>70ms)",
          "recommended_test_type": "reachability",
          "test_justification": "The primary concern in this situation is reachability due to the high number of failed pods (15) and the extremely high error rate (95%). There are currently no users connecting, which meets the conditions for the priority 1 reachability test. The system is unable to be reached, and there is a potential network latency issue or pods not responding, which further supports this recommendation.",
          "test_priority": "high"
        },
        "prompt": "Generate test plan for kube-znn service based on system metrics.\n\nMETRICS:\n- CPU: 1.5% (within healthy range (<25%))\n- Memory: 4.0% (within healthy range (<30%))  \n- Response Time: 2500.0ms (within critical range (>70ms))\n- Error Rate: 0.0%\n- Throughput: 0.0 req/s\n- Network Latency: 0.0ms\n\nLOAD:\n- Users: 30, Rate: 3.0 req/s, Duration: 120s\n- Pattern: burst (Burst pattern)\n- Current: Moderate load\n\nINFRASTRUCTURE:\n- Pods: 3 active, 0 pending, 0 failed\n- Resources: 6 CPUs, 6GB RAM\n- Target: 5 pods, Quality: 600\n\nANALYSIS:\n- Status: operational\n- Test Type: reachability\n- Priority: high\n- Justification: The primary concern in this situation is reachability due to the high number of failed pods (15) and the extremely high error rate (95%). There are currently no users connecting, which meets the conditions for the priority 1 reachability test. The system is unable to be reached, and there is a potential network latency issue or pods not responding, which further supports this recommendation.\n\nREQUIREMENT: Generate tests ONLY for \"reachability\" type.\n\nTEST GUIDELINES:\n- response_time: latency, performance, resource efficiency, network tests, pod metrics, service endpoints, resource monitoring, CPU/memory usage, response time validation, endpoint accessibility\n- reachability: connectivity, availability, pod status, health checks, service discovery, network policies, pod readiness, service endpoints, DNS resolution, port accessibility\n- load: capacity, scalability, stress, resource limits, throughput, horizontal pod autoscaling, resource utilization, performance degradation, bottleneck identification\n\nGenerate comprehensive test suites based on system state. Create thorough kubectl commands that cover all aspects of the recommended test type for complete system validation.\n\nJSON FORMAT:\n{\n  \"test_cases\": [\n    {\n      \"id\": \"test_1\",\n      \"name\": \"reachability - Basic Validation\", \n      \"description\": \"Comprehensive reachability test covering fundamental system aspects\",\n      \"test_type\": \"reachability\",\n      \"priority\": \"high\",\n      \"expected_result\": \"System demonstrates optimal reachability characteristics\",\n      \"success_criteria\": \"All reachability metrics within acceptable thresholds\",\n      \"failure_indicators\": \"Any reachability metric exceeds critical thresholds\"\n    },\n    {\n      \"id\": \"test_2\",\n      \"name\": \"reachability - Resource Impact Analysis\", \n      \"description\": \"Evaluate reachability behavior under current resource constraints\",\n      \"test_type\": \"reachability\",\n      \"priority\": \"high\",\n      \"expected_result\": \"System maintains reachability performance despite resource limitations\",\n      \"success_criteria\": \"Resource usage remains stable while reachability metrics are optimal\",\n      \"failure_indicators\": \"Resource constraints negatively impact reachability performance\"\n    },\n    {\n      \"id\": \"test_3\",\n      \"name\": \"reachability - Load Pattern Validation\", \n      \"description\": \"Validate reachability characteristics under current load pattern\",\n      \"test_type\": \"reachability\",\n      \"priority\": \"high\",\n      \"expected_result\": \"System handles current load pattern with optimal reachability\",\n      \"success_criteria\": \"reachability remains consistent throughout load pattern\",\n      \"failure_indicators\": \"Load pattern causes reachability degradation\"\n    },\n    {\n      \"id\": \"test_4\",\n      \"name\": \"reachability - Infrastructure Validation\", \n      \"description\": \"Comprehensive reachability validation across all infrastructure components\",\n      \"test_type\": \"reachability\",\n      \"priority\": \"high\",\n      \"expected_result\": \"All infrastructure components demonstrate optimal reachability\",\n      \"success_criteria\": \"Pods, services, and network components show consistent reachability\",\n      \"failure_indicators\": \"Infrastructure components show inconsistent reachability behavior\"\n    }\n  ],\n  \"kubectl_commands\": [\n    {\n      \"id\": \"cmd_1\",\n      \"description\": \"Comprehensive pod status and health validation\",\n      \"command\": \"kubectl get pods -n default | grep kube-znn | head -10\",\n      \"expected_output\": \"All pods running and ready with proper resource allocation\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"All pods show Running status with Ready condition\", \n      \"failure_indicators\": \"Any pod shows Pending, Error, CrashLoopBackOff, or resource issues\",\n      \"oracle_validation\": \"Pod status and resource allocation validation\"\n    },\n    {\n      \"id\": \"cmd_2\",\n      \"description\": \"Service discovery and endpoint connectivity validation\",\n      \"command\": \"kubectl get svc -n default | grep kube-znn\",\n      \"expected_output\": \"Valid cluster IP and active endpoints\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"Service has valid cluster IP with active endpoint subsets\",\n      \"failure_indicators\": \"Service has no cluster IP, pending status, or empty endpoints\",\n      \"oracle_validation\": \"Service discovery and endpoint connectivity validation\"\n    },\n    {\n      \"id\": \"cmd_3\",\n      \"description\": \"Resource utilization and performance metrics analysis\",\n      \"command\": \"kubectl top pods -n default | grep kube-znn\",\n      \"expected_output\": \"CPU and memory usage metrics for all containers\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"Pods show optimal resource utilization within defined limits\",\n      \"failure_indicators\": \"Pods show excessive CPU/memory usage or resource contention\",\n      \"oracle_validation\": \"Resource utilization and performance validation\"\n    },\n    {\n      \"id\": \"cmd_4\",\n      \"description\": \"Comprehensive log analysis for system health\",\n      \"command\": \"kubectl logs -n default $(kubectl get pods -n default | grep kube-znn | head -1 | awk '{print $1}') --tail=100 --timestamps\",\n      \"expected_output\": \"Clean logs with proper timestamps and no critical errors\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"No ERROR, FATAL, or critical warnings in recent logs\",\n      \"failure_indicators\": \"Critical errors, warnings, or abnormal log patterns detected\",\n      \"oracle_validation\": \"System health and log analysis validation\"\n    },\n    {\n      \"id\": \"cmd_5\",\n      \"description\": \"Service endpoint accessibility and response validation\",\n      \"command\": \"kubectl exec -n default $(kubectl get pods -n default | grep kube-znn | head -1 | awk '{print $1}') -- curl -s -o /dev/null -w '%{http_code} %{time_total}' http://localhost:80/news.php\",\n      \"expected_output\": \"200 with acceptable response time\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"HTTP 200 response with response time within acceptable thresholds\",\n      \"failure_indicators\": \"Non-200 HTTP response, connection failure, or excessive response time\",\n      \"oracle_validation\": \"Service endpoint accessibility and performance validation\"\n    },\n    {\n      \"id\": \"cmd_6\",\n      \"description\": \"Network policy and connectivity validation\",\n      \"command\": \"kubectl get networkpolicies -n default && kubectl get pods -n default | grep kube-znn | awk '{print $6}'\",\n      \"expected_output\": \"Network policies and pod IP addresses\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"Pods have valid IP addresses and network policies are properly configured\",\n      \"failure_indicators\": \"Pods have no IP addresses or network policies are misconfigured\",\n      \"oracle_validation\": \"Network connectivity and policy validation\"\n    },\n    {\n      \"id\": \"cmd_7\",\n      \"description\": \"Resource limits and requests validation\",\n      \"command\": \"kubectl get pods -n default | grep kube-znn | head -1 | awk '{print $1}' | xargs -I {} kubectl describe pod -n default {} | grep -A 10 'Limits\\|Requests'\",\n      \"expected_output\": \"Resource limits and requests configuration\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"Resource limits and requests are properly configured and within acceptable ranges\",\n      \"failure_indicators\": \"Resource limits too low, requests too high, or misconfigured resource allocation\",\n      \"oracle_validation\": \"Resource configuration validation\"\n    }\n  ]\n}\n\nReturn only valid JSON.",
        "enhanced_prompt": "\nEXPERIMENT_ID: experiment_reachability_1761569381\nRUN_ID: unknown\nTIMESTAMP: 20251027_124943_166547\nUNIQUE_SESSION: experiment_reachability_1761569381_unknown_20251027_124943_166547\n\nGenerate test plan for kube-znn service based on system metrics.\n\nMETRICS:\n- CPU: 1.5% (within healthy range (<25%))\n- Memory: 4.0% (within healthy range (<30%))  \n- Response Time: 2500.0ms (within critical range (>70ms))\n- Error Rate: 0.0%\n- Throughput: 0.0 req/s\n- Network Latency: 0.0ms\n\nLOAD:\n- Users: 30, Rate: 3.0 req/s, Duration: 120s\n- Pattern: burst (Burst pattern)\n- Current: Moderate load\n\nINFRASTRUCTURE:\n- Pods: 3 active, 0 pending, 0 failed\n- Resources: 6 CPUs, 6GB RAM\n- Target: 5 pods, Quality: 600\n\nANALYSIS:\n- Status: operational\n- Test Type: reachability\n- Priority: high\n- Justification: The primary concern in this situation is reachability due to the high number of failed pods (15) and the extremely high error rate (95%). There are currently no users connecting, which meets the conditions for the priority 1 reachability test. The system is unable to be reached, and there is a potential network latency issue or pods not responding, which further supports this recommendation.\n\nREQUIREMENT: Generate tests ONLY for \"reachability\" type.\n\nTEST GUIDELINES:\n- response_time: latency, performance, resource efficiency, network tests, pod metrics, service endpoints, resource monitoring, CPU/memory usage, response time validation, endpoint accessibility\n- reachability: connectivity, availability, pod status, health checks, service discovery, network policies, pod readiness, service endpoints, DNS resolution, port accessibility\n- load: capacity, scalability, stress, resource limits, throughput, horizontal pod autoscaling, resource utilization, performance degradation, bottleneck identification\n\nGenerate comprehensive test suites based on system state. Create thorough kubectl commands that cover all aspects of the recommended test type for complete system validation.\n\nJSON FORMAT:\n{\n  \"test_cases\": [\n    {\n      \"id\": \"test_1\",\n      \"name\": \"reachability - Basic Validation\", \n      \"description\": \"Comprehensive reachability test covering fundamental system aspects\",\n      \"test_type\": \"reachability\",\n      \"priority\": \"high\",\n      \"expected_result\": \"System demonstrates optimal reachability characteristics\",\n      \"success_criteria\": \"All reachability metrics within acceptable thresholds\",\n      \"failure_indicators\": \"Any reachability metric exceeds critical thresholds\"\n    },\n    {\n      \"id\": \"test_2\",\n      \"name\": \"reachability - Resource Impact Analysis\", \n      \"description\": \"Evaluate reachability behavior under current resource constraints\",\n      \"test_type\": \"reachability\",\n      \"priority\": \"high\",\n      \"expected_result\": \"System maintains reachability performance despite resource limitations\",\n      \"success_criteria\": \"Resource usage remains stable while reachability metrics are optimal\",\n      \"failure_indicators\": \"Resource constraints negatively impact reachability performance\"\n    },\n    {\n      \"id\": \"test_3\",\n      \"name\": \"reachability - Load Pattern Validation\", \n      \"description\": \"Validate reachability characteristics under current load pattern\",\n      \"test_type\": \"reachability\",\n      \"priority\": \"high\",\n      \"expected_result\": \"System handles current load pattern with optimal reachability\",\n      \"success_criteria\": \"reachability remains consistent throughout load pattern\",\n      \"failure_indicators\": \"Load pattern causes reachability degradation\"\n    },\n    {\n      \"id\": \"test_4\",\n      \"name\": \"reachability - Infrastructure Validation\", \n      \"description\": \"Comprehensive reachability validation across all infrastructure components\",\n      \"test_type\": \"reachability\",\n      \"priority\": \"high\",\n      \"expected_result\": \"All infrastructure components demonstrate optimal reachability\",\n      \"success_criteria\": \"Pods, services, and network components show consistent reachability\",\n      \"failure_indicators\": \"Infrastructure components show inconsistent reachability behavior\"\n    }\n  ],\n  \"kubectl_commands\": [\n    {\n      \"id\": \"cmd_1\",\n      \"description\": \"Comprehensive pod status and health validation\",\n      \"command\": \"kubectl get pods -n default | grep kube-znn | head -10\",\n      \"expected_output\": \"All pods running and ready with proper resource allocation\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"All pods show Running status with Ready condition\", \n      \"failure_indicators\": \"Any pod shows Pending, Error, CrashLoopBackOff, or resource issues\",\n      \"oracle_validation\": \"Pod status and resource allocation validation\"\n    },\n    {\n      \"id\": \"cmd_2\",\n      \"description\": \"Service discovery and endpoint connectivity validation\",\n      \"command\": \"kubectl get svc -n default | grep kube-znn\",\n      \"expected_output\": \"Valid cluster IP and active endpoints\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"Service has valid cluster IP with active endpoint subsets\",\n      \"failure_indicators\": \"Service has no cluster IP, pending status, or empty endpoints\",\n      \"oracle_validation\": \"Service discovery and endpoint connectivity validation\"\n    },\n    {\n      \"id\": \"cmd_3\",\n      \"description\": \"Resource utilization and performance metrics analysis\",\n      \"command\": \"kubectl top pods -n default | grep kube-znn\",\n      \"expected_output\": \"CPU and memory usage metrics for all containers\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"Pods show optimal resource utilization within defined limits\",\n      \"failure_indicators\": \"Pods show excessive CPU/memory usage or resource contention\",\n      \"oracle_validation\": \"Resource utilization and performance validation\"\n    },\n    {\n      \"id\": \"cmd_4\",\n      \"description\": \"Comprehensive log analysis for system health\",\n      \"command\": \"kubectl logs -n default $(kubectl get pods -n default | grep kube-znn | head -1 | awk '{print $1}') --tail=100 --timestamps\",\n      \"expected_output\": \"Clean logs with proper timestamps and no critical errors\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"No ERROR, FATAL, or critical warnings in recent logs\",\n      \"failure_indicators\": \"Critical errors, warnings, or abnormal log patterns detected\",\n      \"oracle_validation\": \"System health and log analysis validation\"\n    },\n    {\n      \"id\": \"cmd_5\",\n      \"description\": \"Service endpoint accessibility and response validation\",\n      \"command\": \"kubectl exec -n default $(kubectl get pods -n default | grep kube-znn | head -1 | awk '{print $1}') -- curl -s -o /dev/null -w '%{http_code} %{time_total}' http://localhost:80/news.php\",\n      \"expected_output\": \"200 with acceptable response time\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"HTTP 200 response with response time within acceptable thresholds\",\n      \"failure_indicators\": \"Non-200 HTTP response, connection failure, or excessive response time\",\n      \"oracle_validation\": \"Service endpoint accessibility and performance validation\"\n    },\n    {\n      \"id\": \"cmd_6\",\n      \"description\": \"Network policy and connectivity validation\",\n      \"command\": \"kubectl get networkpolicies -n default && kubectl get pods -n default | grep kube-znn | awk '{print $6}'\",\n      \"expected_output\": \"Network policies and pod IP addresses\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"Pods have valid IP addresses and network policies are properly configured\",\n      \"failure_indicators\": \"Pods have no IP addresses or network policies are misconfigured\",\n      \"oracle_validation\": \"Network connectivity and policy validation\"\n    },\n    {\n      \"id\": \"cmd_7\",\n      \"description\": \"Resource limits and requests validation\",\n      \"command\": \"kubectl get pods -n default | grep kube-znn | head -1 | awk '{print $1}' | xargs -I {} kubectl describe pod -n default {} | grep -A 10 'Limits\\|Requests'\",\n      \"expected_output\": \"Resource limits and requests configuration\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"Resource limits and requests are properly configured and within acceptable ranges\",\n      \"failure_indicators\": \"Resource limits too low, requests too high, or misconfigured resource allocation\",\n      \"oracle_validation\": \"Resource configuration validation\"\n    }\n  ]\n}\n\nReturn only valid JSON.\n\nIMPORTANTE: Esta \u00e9 uma requisi\u00e7\u00e3o \u00fanica para o experimento experiment_reachability_1761569381, run unknown. \nN\u00c3O reutilize dados de experimentos anteriores. Gere uma resposta espec\u00edfica para este momento.\n",
        "response": " {\n  \"test_cases\": [\n    {\n      \"id\": \"test_1\",\n      \"name\": \"reachability - Basic Validation\",\n      \"description\": \"Comprehensive reachability test covering fundamental system aspects\",\n      \"test_type\": \"reachability\",\n      \"priority\": \"high\",\n      \"expected_result\": \"System demonstrates optimal reachability characteristics\",\n      \"success_criteria\": \"All reachability metrics within acceptable thresholds\",\n      \"failure_indicators\": \"Any reachability metric exceeds critical thresholds\"\n    },\n    {\n      \"id\": \"test_2\",\n      \"name\": \"reachability - Resource Impact Analysis\",\n      \"description\": \"Evaluate reachability behavior under current resource constraints\",\n      \"test_type\": \"reachability\",\n      \"priority\": \"high\",\n      \"expected_result\": \"System maintains reachability performance despite resource limitations\",\n      \"success_criteria\": \"Resource usage remains stable while reachability metrics are optimal\",\n      \"failure_indicators\": \"Resource constraints negatively impact reachability performance\"\n    },\n    {\n      \"id\": \"test_3\",\n      \"name\": \"reachability - Load Pattern Validation\",\n      \"description\": \"Validate reachability characteristics under current load pattern\",\n      \"test_type\": \"reachability\",\n      \"priority\": \"high\",\n      \"expected_result\": \"System handles current load pattern with optimal reachability\",\n      \"success_criteria\": \"reachability remains consistent throughout load pattern\",\n      \"failure_indicators\": \"Load pattern causes reachability degradation\"\n    },\n    {\n      \"id\": \"test_4\",\n      \"name\": \"reachability - Infrastructure Validation\",\n      \"description\": \"Comprehensive reachability validation across all infrastructure components\",\n      \"test_type\": \"reachability\",\n      \"priority\": \"high\",\n      \"expected_result\": \"All infrastructure components demonstrate optimal reachability\",\n      \"success_criteria\": \"Pods, services, and network components show consistent reachability\",\n      \"failure_indicators\": \"Infrastructure components show inconsistent reachability behavior\"\n    }\n  ],\n  \"kubectl_commands\": [\n    {\n      \"id\": \"cmd_1\",\n      \"description\": \"Comprehensive pod status and health validation\",\n      \"command\": \"kubectl get pods -n default | grep kube-znn | head -10\",\n      \"expected_output\": \"All pods running and ready with proper resource allocation\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"All pods show Running status with Ready condition\",\n      \"failure_indicators\": \"Any pod shows Pending, Error, CrashLoopBackOff, or resource issues\"\n    },\n    {\n      \"id\": \"cmd_2\",\n      \"description\": \"Service discovery and endpoint connectivity validation\",\n      \"command\": \"kubectl get svc -n default | grep kube-znn\",\n      \"expected_output\": \"Valid cluster IP and active endpoints\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"Service has valid cluster IP with active endpoint subsets\",\n      \"failure_indicators\": \"Service has no cluster IP, pending status, or empty endpoints\"\n    },\n    {\n      \"id\": \"cmd_3\",\n      \"description\": \"Resource utilization and performance metrics analysis\",\n      \"command\": \"kubectl top pods -n default | grep kube-znn\",\n      \"expected_output\": \"CPU and memory usage metrics for all containers\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"Pods show optimal resource utilization within defined limits\",\n      \"failure_indicators\": \"Pods show excessive CPU/memory usage or resource contention\"\n    },\n    {\n      \"id\": \"cmd_4\",\n      \"description\": \"Comprehensive log analysis for system health\",\n      \"command\": \"kubectl logs -n default $(kubectl get pods -n default | grep kube-znn | head -1 | awk '{print $1}') --tail=100 --timestamps\",\n      \"expected_output\": \"Clean logs with proper timestamps and no critical errors\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"No ERROR, FATAL, or critical warnings in recent logs\",\n      \"failure_indicators\": \"Critical errors, warnings, or abnormal log patterns detected\"\n    },\n    {\n      \"id\": \"cmd_5\",\n      \"description\": \"Service endpoint accessibility and response validation\",\n      \"command\": \"kubectl exec -n default $(kubectl get pods -n default | grep kube-znn | head -1 | awk '{print $1}') -- curl -s -o /dev/null -w '%{http_code} %{time_total}' http://localhost:80/news.php\",\n      \"expected_output\": \"200 with acceptable response time\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"HTTP 200 response with response time within acceptable thresholds\",\n      \"failure_indicators\": \"Non-200 HTTP response, connection failure, or excessive response time\"\n    },\n    {\n      \"id\": \"cmd_6\",\n      \"description\": \"Network policy and connectivity validation\",\n      \"command\": \"kubectl get networkpolicies -n default && kubectl get pods -n default | grep kube-znn | awk '{print $6}'\",\n      \"expected_output\": \"Network policies and pod IP addresses\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"Pods have valid IP addresses and network policies are properly configured\",\n      \"failure_indicators\": \"Pods have no IP addresses or network policies are misconfigured\"\n    }\n  ]\n}\n\nThis JSON response is tailored to the specific experiment with ID experiment\\_reachability\\_1761569381 and RUN\\_ID unknown. The test cases and kubectl commands are generated based on the provided metrics, load, and infrastructure details, focusing on reachability test type as requested. Please note that this JSON response is created solely for this experiment and does not reuse data from previous experiments.",
        "prompt_type": "test_generation",
        "experiment_id": "experiment_reachability_1761569381",
        "run_id": "unknown"
      },
      "interaction_complete": true
    },
    {
      "template_name": "planner_v10_3",
      "template_content": "Generate test plan for kube-znn service based on system metrics.\n\nMETRICS:\n- CPU: {used_system_cpu}% ({cpu_range_description})\n- Memory: {used_system_memory}% ({memory_range_description})  \n- Response Time: {median_response_time}ms ({response_time_range_description})\n- Error Rate: {error_rate}%\n- Throughput: {throughput} req/s\n- Network Latency: {network_latency}ms\n\nLOAD:\n- Users: {concurrent_users}, Rate: {request_rate} req/s, Duration: {session_duration}s\n- Pattern: {load_pattern} ({load_pattern_description})\n- Current: {current_load_description}\n\nINFRASTRUCTURE:\n- Pods: {active_pods} active, {pending_pods} pending, {failed_pods} failed\n- Resources: {allocated_cpus} CPUs, {allocated_memory}GB RAM\n- Target: {target_system_pods} pods, Quality: {quality_of_media}\n\nANALYSIS:\n- Status: {system_status}\n- Test Type: {recommended_test_type}\n- Priority: {test_priority}\n- Justification: {test_justification}\n\nREQUIREMENT: Generate tests ONLY for \"{recommended_test_type}\" type.\n\nTEST GUIDELINES:\n- response_time: latency, performance, resource efficiency, network tests, pod metrics, service endpoints, resource monitoring, CPU/memory usage, response time validation, endpoint accessibility\n- reachability: connectivity, availability, pod status, health checks, service discovery, network policies, pod readiness, service endpoints, DNS resolution, port accessibility\n- load: capacity, scalability, stress, resource limits, throughput, horizontal pod autoscaling, resource utilization, performance degradation, bottleneck identification\n\nGenerate comprehensive test suites based on system state. Create thorough kubectl commands that cover all aspects of the recommended test type for complete system validation.\n\nJSON FORMAT:\n{{\n  \"test_cases\": [\n    {{\n      \"id\": \"test_1\",\n      \"name\": \"{recommended_test_type} - Basic Validation\", \n      \"description\": \"Comprehensive {recommended_test_type} test covering fundamental system aspects\",\n      \"test_type\": \"{recommended_test_type}\",\n      \"priority\": \"{test_priority}\",\n      \"expected_result\": \"System demonstrates optimal {recommended_test_type} characteristics\",\n      \"success_criteria\": \"All {recommended_test_type} metrics within acceptable thresholds\",\n      \"failure_indicators\": \"Any {recommended_test_type} metric exceeds critical thresholds\"\n    }},\n    {{\n      \"id\": \"test_2\",\n      \"name\": \"{recommended_test_type} - Resource Impact Analysis\", \n      \"description\": \"Evaluate {recommended_test_type} behavior under current resource constraints\",\n      \"test_type\": \"{recommended_test_type}\",\n      \"priority\": \"{test_priority}\",\n      \"expected_result\": \"System maintains {recommended_test_type} performance despite resource limitations\",\n      \"success_criteria\": \"Resource usage remains stable while {recommended_test_type} metrics are optimal\",\n      \"failure_indicators\": \"Resource constraints negatively impact {recommended_test_type} performance\"\n    }},\n    {{\n      \"id\": \"test_3\",\n      \"name\": \"{recommended_test_type} - Load Pattern Validation\", \n      \"description\": \"Validate {recommended_test_type} characteristics under current load pattern\",\n      \"test_type\": \"{recommended_test_type}\",\n      \"priority\": \"{test_priority}\",\n      \"expected_result\": \"System handles current load pattern with optimal {recommended_test_type}\",\n      \"success_criteria\": \"{recommended_test_type} remains consistent throughout load pattern\",\n      \"failure_indicators\": \"Load pattern causes {recommended_test_type} degradation\"\n    }},\n    {{\n      \"id\": \"test_4\",\n      \"name\": \"{recommended_test_type} - Infrastructure Validation\", \n      \"description\": \"Comprehensive {recommended_test_type} validation across all infrastructure components\",\n      \"test_type\": \"{recommended_test_type}\",\n      \"priority\": \"{test_priority}\",\n      \"expected_result\": \"All infrastructure components demonstrate optimal {recommended_test_type}\",\n      \"success_criteria\": \"Pods, services, and network components show consistent {recommended_test_type}\",\n      \"failure_indicators\": \"Infrastructure components show inconsistent {recommended_test_type} behavior\"\n    }}\n  ],\n  \"kubectl_commands\": [\n    {{\n      \"id\": \"cmd_1\",\n      \"description\": \"Comprehensive pod status and health validation\",\n      \"command\": \"kubectl get pods -n default | grep kube-znn | head -10\",\n      \"expected_output\": \"All pods running and ready with proper resource allocation\",\n      \"test_type\": \"{recommended_test_type}\",\n      \"success_criteria\": \"All pods show Running status with Ready condition\", \n      \"failure_indicators\": \"Any pod shows Pending, Error, CrashLoopBackOff, or resource issues\",\n      \"oracle_validation\": \"Pod status and resource allocation validation\"\n    }},\n    {{\n      \"id\": \"cmd_2\",\n      \"description\": \"Service discovery and endpoint connectivity validation\",\n      \"command\": \"kubectl get svc -n default | grep kube-znn\",\n      \"expected_output\": \"Valid cluster IP and active endpoints\",\n      \"test_type\": \"{recommended_test_type}\",\n      \"success_criteria\": \"Service has valid cluster IP with active endpoint subsets\",\n      \"failure_indicators\": \"Service has no cluster IP, pending status, or empty endpoints\",\n      \"oracle_validation\": \"Service discovery and endpoint connectivity validation\"\n    }},\n    {{\n      \"id\": \"cmd_3\",\n      \"description\": \"Resource utilization and performance metrics analysis\",\n      \"command\": \"kubectl top pods -n default | grep kube-znn\",\n      \"expected_output\": \"CPU and memory usage metrics for all containers\",\n      \"test_type\": \"{recommended_test_type}\",\n      \"success_criteria\": \"Pods show optimal resource utilization within defined limits\",\n      \"failure_indicators\": \"Pods show excessive CPU/memory usage or resource contention\",\n      \"oracle_validation\": \"Resource utilization and performance validation\"\n    }},\n    {{\n      \"id\": \"cmd_4\",\n      \"description\": \"Comprehensive log analysis for system health\",\n      \"command\": \"kubectl logs -n default $(kubectl get pods -n default | grep kube-znn | head -1 | awk '{{print $1}}') --tail=100 --timestamps\",\n      \"expected_output\": \"Clean logs with proper timestamps and no critical errors\",\n      \"test_type\": \"{recommended_test_type}\",\n      \"success_criteria\": \"No ERROR, FATAL, or critical warnings in recent logs\",\n      \"failure_indicators\": \"Critical errors, warnings, or abnormal log patterns detected\",\n      \"oracle_validation\": \"System health and log analysis validation\"\n    }},\n    {{\n      \"id\": \"cmd_5\",\n      \"description\": \"Service endpoint accessibility and response validation\",\n      \"command\": \"kubectl exec -n default $(kubectl get pods -n default | grep kube-znn | head -1 | awk '{{print $1}}') -- curl -s -o /dev/null -w '%{{http_code}} %{{time_total}}' http://localhost:80/news.php\",\n      \"expected_output\": \"200 with acceptable response time\",\n      \"test_type\": \"{recommended_test_type}\",\n      \"success_criteria\": \"HTTP 200 response with response time within acceptable thresholds\",\n      \"failure_indicators\": \"Non-200 HTTP response, connection failure, or excessive response time\",\n      \"oracle_validation\": \"Service endpoint accessibility and performance validation\"\n    }},\n    {{\n      \"id\": \"cmd_6\",\n      \"description\": \"Network policy and connectivity validation\",\n      \"command\": \"kubectl get networkpolicies -n default && kubectl get pods -n default | grep kube-znn | awk '{{print $6}}'\",\n      \"expected_output\": \"Network policies and pod IP addresses\",\n      \"test_type\": \"{recommended_test_type}\",\n      \"success_criteria\": \"Pods have valid IP addresses and network policies are properly configured\",\n      \"failure_indicators\": \"Pods have no IP addresses or network policies are misconfigured\",\n      \"oracle_validation\": \"Network connectivity and policy validation\"\n    }},\n    {{\n      \"id\": \"cmd_7\",\n      \"description\": \"Resource limits and requests validation\",\n      \"command\": \"kubectl get pods -n default | grep kube-znn | head -1 | awk '{{print $1}}' | xargs -I {{}} kubectl describe pod -n default {{}} | grep -A 10 'Limits\\|Requests'\",\n      \"expected_output\": \"Resource limits and requests configuration\",\n      \"test_type\": \"{recommended_test_type}\",\n      \"success_criteria\": \"Resource limits and requests are properly configured and within acceptable ranges\",\n      \"failure_indicators\": \"Resource limits too low, requests too high, or misconfigured resource allocation\",\n      \"oracle_validation\": \"Resource configuration validation\"\n    }}\n  ]\n}}\n\nReturn only valid JSON.",
      "variables": {
        "experiment_id": "experiment_reachability_1761569381",
        "used_system_cpu": 1.5,
        "used_system_memory": 4.0,
        "median_response_time": 2500.0,
        "concurrent_users": 30,
        "request_rate": 3.0,
        "session_duration": 120,
        "load_pattern": "burst",
        "load_pattern_description": "Burst pattern",
        "current_load_description": "Moderate load",
        "target_system_pods": 5,
        "quality_of_media": 600,
        "target_system_architecture": "Microservices",
        "allocated_cpus": 6,
        "allocated_memory": 6,
        "error_rate": 0.0,
        "throughput": 0.0,
        "network_latency": 0.0,
        "active_pods": 3,
        "pending_pods": 0,
        "failed_pods": 0,
        "system_status": "operational",
        "cpu_range_description": "within healthy range (<25%)",
        "memory_range_description": "within healthy range (<30%)",
        "response_time_range_description": "within critical range (>70ms)",
        "recommended_test_type": "reachability",
        "test_justification": "The primary concern in this situation is reachability due to the high number of failed pods (15) and the extremely high error rate (95%). There are currently no users connecting, which meets the conditions for the priority 1 reachability test. The system is unable to be reached, and there is a potential network latency issue or pods not responding, which further supports this recommendation.",
        "test_priority": "high"
      },
      "filled_template": "Generate test plan for kube-znn service based on system metrics.\n\nMETRICS:\n- CPU: {used_system_cpu}% ({cpu_range_description})\n- Memory: {used_system_memory}% ({memory_range_description})  \n- Response Time: {median_response_time}ms ({response_time_range_description})\n- Error Rate: {error_rate}%\n- Throughput: {throughput} req/s\n- Network Latency: {network_latency}ms\n\nLOAD:\n- Users: {concurrent_users}, Rate: {request_rate} req/s, Duration: {session_duration}s\n- Pattern: {load_pattern} ({load_pattern_description})\n- Current: {current_load_description}\n\nINFRASTRUCTURE:\n- Pods: {active_pods} active, {pending_pods} pending, {failed_pods} failed\n- Resources: {allocated_cpus} CPUs, {allocated_memory}GB RAM\n- Target: {target_system_pods} pods, Quality: {quality_of_media}\n\nANALYSIS:\n- Status: {system_status}\n- Test Type: {recommended_test_type}\n- Priority: {test_priority}\n- Justification: {test_justification}\n\nREQUIREMENT: Generate tests ONLY for \"{recommended_test_type}\" type.\n\nTEST GUIDELINES:\n- response_time: latency, performance, resource efficiency, network tests, pod metrics, service endpoints, resource monitoring, CPU/memory usage, response time validation, endpoint accessibility\n- reachability: connectivity, availability, pod status, health checks, service discovery, network policies, pod readiness, service endpoints, DNS resolution, port accessibility\n- load: capacity, scalability, stress, resource limits, throughput, horizontal pod autoscaling, resource utilization, performance degradation, bottleneck identification\n\nGenerate comprehensive test suites based on system state. Create thorough kubectl commands that cover all aspects of the recommended test type for complete system validation.\n\nJSON FORMAT:\n{{\n  \"test_cases\": [\n    {{\n      \"id\": \"test_1\",\n      \"name\": \"{recommended_test_type} - Basic Validation\", \n      \"description\": \"Comprehensive {recommended_test_type} test covering fundamental system aspects\",\n      \"test_type\": \"{recommended_test_type}\",\n      \"priority\": \"{test_priority}\",\n      \"expected_result\": \"System demonstrates optimal {recommended_test_type} characteristics\",\n      \"success_criteria\": \"All {recommended_test_type} metrics within acceptable thresholds\",\n      \"failure_indicators\": \"Any {recommended_test_type} metric exceeds critical thresholds\"\n    }},\n    {{\n      \"id\": \"test_2\",\n      \"name\": \"{recommended_test_type} - Resource Impact Analysis\", \n      \"description\": \"Evaluate {recommended_test_type} behavior under current resource constraints\",\n      \"test_type\": \"{recommended_test_type}\",\n      \"priority\": \"{test_priority}\",\n      \"expected_result\": \"System maintains {recommended_test_type} performance despite resource limitations\",\n      \"success_criteria\": \"Resource usage remains stable while {recommended_test_type} metrics are optimal\",\n      \"failure_indicators\": \"Resource constraints negatively impact {recommended_test_type} performance\"\n    }},\n    {{\n      \"id\": \"test_3\",\n      \"name\": \"{recommended_test_type} - Load Pattern Validation\", \n      \"description\": \"Validate {recommended_test_type} characteristics under current load pattern\",\n      \"test_type\": \"{recommended_test_type}\",\n      \"priority\": \"{test_priority}\",\n      \"expected_result\": \"System handles current load pattern with optimal {recommended_test_type}\",\n      \"success_criteria\": \"{recommended_test_type} remains consistent throughout load pattern\",\n      \"failure_indicators\": \"Load pattern causes {recommended_test_type} degradation\"\n    }},\n    {{\n      \"id\": \"test_4\",\n      \"name\": \"{recommended_test_type} - Infrastructure Validation\", \n      \"description\": \"Comprehensive {recommended_test_type} validation across all infrastructure components\",\n      \"test_type\": \"{recommended_test_type}\",\n      \"priority\": \"{test_priority}\",\n      \"expected_result\": \"All infrastructure components demonstrate optimal {recommended_test_type}\",\n      \"success_criteria\": \"Pods, services, and network components show consistent {recommended_test_type}\",\n      \"failure_indicators\": \"Infrastructure components show inconsistent {recommended_test_type} behavior\"\n    }}\n  ],\n  \"kubectl_commands\": [\n    {{\n      \"id\": \"cmd_1\",\n      \"description\": \"Comprehensive pod status and health validation\",\n      \"command\": \"kubectl get pods -n default | grep kube-znn | head -10\",\n      \"expected_output\": \"All pods running and ready with proper resource allocation\",\n      \"test_type\": \"{recommended_test_type}\",\n      \"success_criteria\": \"All pods show Running status with Ready condition\", \n      \"failure_indicators\": \"Any pod shows Pending, Error, CrashLoopBackOff, or resource issues\",\n      \"oracle_validation\": \"Pod status and resource allocation validation\"\n    }},\n    {{\n      \"id\": \"cmd_2\",\n      \"description\": \"Service discovery and endpoint connectivity validation\",\n      \"command\": \"kubectl get svc -n default | grep kube-znn\",\n      \"expected_output\": \"Valid cluster IP and active endpoints\",\n      \"test_type\": \"{recommended_test_type}\",\n      \"success_criteria\": \"Service has valid cluster IP with active endpoint subsets\",\n      \"failure_indicators\": \"Service has no cluster IP, pending status, or empty endpoints\",\n      \"oracle_validation\": \"Service discovery and endpoint connectivity validation\"\n    }},\n    {{\n      \"id\": \"cmd_3\",\n      \"description\": \"Resource utilization and performance metrics analysis\",\n      \"command\": \"kubectl top pods -n default | grep kube-znn\",\n      \"expected_output\": \"CPU and memory usage metrics for all containers\",\n      \"test_type\": \"{recommended_test_type}\",\n      \"success_criteria\": \"Pods show optimal resource utilization within defined limits\",\n      \"failure_indicators\": \"Pods show excessive CPU/memory usage or resource contention\",\n      \"oracle_validation\": \"Resource utilization and performance validation\"\n    }},\n    {{\n      \"id\": \"cmd_4\",\n      \"description\": \"Comprehensive log analysis for system health\",\n      \"command\": \"kubectl logs -n default $(kubectl get pods -n default | grep kube-znn | head -1 | awk '{{print $1}}') --tail=100 --timestamps\",\n      \"expected_output\": \"Clean logs with proper timestamps and no critical errors\",\n      \"test_type\": \"{recommended_test_type}\",\n      \"success_criteria\": \"No ERROR, FATAL, or critical warnings in recent logs\",\n      \"failure_indicators\": \"Critical errors, warnings, or abnormal log patterns detected\",\n      \"oracle_validation\": \"System health and log analysis validation\"\n    }},\n    {{\n      \"id\": \"cmd_5\",\n      \"description\": \"Service endpoint accessibility and response validation\",\n      \"command\": \"kubectl exec -n default $(kubectl get pods -n default | grep kube-znn | head -1 | awk '{{print $1}}') -- curl -s -o /dev/null -w '%{{http_code}} %{{time_total}}' http://localhost:80/news.php\",\n      \"expected_output\": \"200 with acceptable response time\",\n      \"test_type\": \"{recommended_test_type}\",\n      \"success_criteria\": \"HTTP 200 response with response time within acceptable thresholds\",\n      \"failure_indicators\": \"Non-200 HTTP response, connection failure, or excessive response time\",\n      \"oracle_validation\": \"Service endpoint accessibility and performance validation\"\n    }},\n    {{\n      \"id\": \"cmd_6\",\n      \"description\": \"Network policy and connectivity validation\",\n      \"command\": \"kubectl get networkpolicies -n default && kubectl get pods -n default | grep kube-znn | awk '{{print $6}}'\",\n      \"expected_output\": \"Network policies and pod IP addresses\",\n      \"test_type\": \"{recommended_test_type}\",\n      \"success_criteria\": \"Pods have valid IP addresses and network policies are properly configured\",\n      \"failure_indicators\": \"Pods have no IP addresses or network policies are misconfigured\",\n      \"oracle_validation\": \"Network connectivity and policy validation\"\n    }},\n    {{\n      \"id\": \"cmd_7\",\n      \"description\": \"Resource limits and requests validation\",\n      \"command\": \"kubectl get pods -n default | grep kube-znn | head -1 | awk '{{print $1}}' | xargs -I {{}} kubectl describe pod -n default {{}} | grep -A 10 'Limits\\|Requests'\",\n      \"expected_output\": \"Resource limits and requests configuration\",\n      \"test_type\": \"{recommended_test_type}\",\n      \"success_criteria\": \"Resource limits and requests are properly configured and within acceptable ranges\",\n      \"failure_indicators\": \"Resource limits too low, requests too high, or misconfigured resource allocation\",\n      \"oracle_validation\": \"Resource configuration validation\"\n    }}\n  ]\n}}\n\nReturn only valid JSON."
    }
  ],
  "test_plans": [
    {
      "test_cases": [
        {
          "id": "test_1",
          "name": "reachability - Basic Validation",
          "description": "Comprehensive reachability test covering fundamental system aspects",
          "test_type": "reachability",
          "priority": "high",
          "expected_result": "System demonstrates optimal reachability characteristics",
          "success_criteria": "All reachability metrics within acceptable thresholds",
          "failure_indicators": "Any reachability metric exceeds critical thresholds"
        },
        {
          "id": "test_2",
          "name": "reachability - Resource Impact Analysis",
          "description": "Evaluate reachability behavior under current resource constraints",
          "test_type": "reachability",
          "priority": "high",
          "expected_result": "System maintains reachability performance despite resource limitations",
          "success_criteria": "Resource usage remains stable while reachability metrics are optimal",
          "failure_indicators": "Resource constraints negatively impact reachability performance"
        },
        {
          "id": "test_3",
          "name": "reachability - Load Pattern Validation",
          "description": "Validate reachability characteristics under current load pattern",
          "test_type": "reachability",
          "priority": "high",
          "expected_result": "System handles current load pattern with optimal reachability",
          "success_criteria": "reachability remains consistent throughout load pattern",
          "failure_indicators": "Load pattern causes reachability degradation"
        },
        {
          "id": "test_4",
          "name": "reachability - Infrastructure Validation",
          "description": "Comprehensive reachability validation across all infrastructure components",
          "test_type": "reachability",
          "priority": "high",
          "expected_result": "All infrastructure components demonstrate optimal reachability",
          "success_criteria": "Pods, services, and network components show consistent reachability",
          "failure_indicators": "Infrastructure components show inconsistent reachability behavior"
        }
      ],
      "kubectl_commands": [
        {
          "id": "cmd_1",
          "description": "Comprehensive pod status and health validation",
          "command": "kubectl get pods -n default | grep kube-znn | head -10",
          "expected_output": "All pods running and ready with proper resource allocation",
          "test_type": "reachability",
          "success_criteria": "All pods show Running status with Ready condition",
          "failure_indicators": "Any pod shows Pending, Error, CrashLoopBackOff, or resource issues"
        },
        {
          "id": "cmd_2",
          "description": "Service discovery and endpoint connectivity validation",
          "command": "kubectl get svc -n default | grep kube-znn",
          "expected_output": "Valid cluster IP and active endpoints",
          "test_type": "reachability",
          "success_criteria": "Service has valid cluster IP with active endpoint subsets",
          "failure_indicators": "Service has no cluster IP, pending status, or empty endpoints"
        },
        {
          "id": "cmd_3",
          "description": "Resource utilization and performance metrics analysis",
          "command": "kubectl top pods -n default | grep kube-znn",
          "expected_output": "CPU and memory usage metrics for all containers",
          "test_type": "reachability",
          "success_criteria": "Pods show optimal resource utilization within defined limits",
          "failure_indicators": "Pods show excessive CPU/memory usage or resource contention"
        },
        {
          "id": "cmd_4",
          "description": "Comprehensive log analysis for system health",
          "command": "kubectl logs -n default $(kubectl get pods -n default | grep kube-znn | head -1 | awk '{print $1}') --tail=100 --timestamps",
          "expected_output": "Clean logs with proper timestamps and no critical errors",
          "test_type": "reachability",
          "success_criteria": "No ERROR, FATAL, or critical warnings in recent logs",
          "failure_indicators": "Critical errors, warnings, or abnormal log patterns detected"
        },
        {
          "id": "cmd_5",
          "description": "Service endpoint accessibility and response validation",
          "command": "kubectl exec -n default $(kubectl get pods -n default | grep kube-znn | head -1 | awk '{print $1}') -- curl -s -o /dev/null -w '%{http_code} %{time_total}' http://localhost:80/news.php",
          "expected_output": "200 with acceptable response time",
          "test_type": "reachability",
          "success_criteria": "HTTP 200 response with response time within acceptable thresholds",
          "failure_indicators": "Non-200 HTTP response, connection failure, or excessive response time"
        },
        {
          "id": "cmd_6",
          "description": "Network policy and connectivity validation",
          "command": "kubectl get networkpolicies -n default && kubectl get pods -n default | grep kube-znn | awk '{print $6}'",
          "expected_output": "Network policies and pod IP addresses",
          "test_type": "reachability",
          "success_criteria": "Pods have valid IP addresses and network policies are properly configured",
          "failure_indicators": "Pods have no IP addresses or network policies are misconfigured"
        }
      ]
    }
  ],
  "kubectl_commands": [
    {
      "id": "cmd_1",
      "description": "Comprehensive pod status and health validation",
      "command": "kubectl get pods -n default | grep kube-znn | head -10",
      "expected_output": "All pods running and ready with proper resource allocation",
      "test_type": "reachability",
      "success_criteria": "All pods show Running status with Ready condition",
      "failure_indicators": "Any pod shows Pending, Error, CrashLoopBackOff, or resource issues"
    },
    {
      "id": "cmd_2",
      "description": "Service discovery and endpoint connectivity validation",
      "command": "kubectl get svc -n default | grep kube-znn",
      "expected_output": "Valid cluster IP and active endpoints",
      "test_type": "reachability",
      "success_criteria": "Service has valid cluster IP with active endpoint subsets",
      "failure_indicators": "Service has no cluster IP, pending status, or empty endpoints"
    },
    {
      "id": "cmd_3",
      "description": "Resource utilization and performance metrics analysis",
      "command": "kubectl top pods -n default | grep kube-znn",
      "expected_output": "CPU and memory usage metrics for all containers",
      "test_type": "reachability",
      "success_criteria": "Pods show optimal resource utilization within defined limits",
      "failure_indicators": "Pods show excessive CPU/memory usage or resource contention"
    },
    {
      "id": "cmd_4",
      "description": "Comprehensive log analysis for system health",
      "command": "kubectl logs -n default $(kubectl get pods -n default | grep kube-znn | head -1 | awk '{print $1}') --tail=100 --timestamps",
      "expected_output": "Clean logs with proper timestamps and no critical errors",
      "test_type": "reachability",
      "success_criteria": "No ERROR, FATAL, or critical warnings in recent logs",
      "failure_indicators": "Critical errors, warnings, or abnormal log patterns detected"
    },
    {
      "id": "cmd_5",
      "description": "Service endpoint accessibility and response validation",
      "command": "kubectl exec -n default $(kubectl get pods -n default | grep kube-znn | head -1 | awk '{print $1}') -- curl -s -o /dev/null -w '%{http_code} %{time_total}' http://localhost:80/news.php",
      "expected_output": "200 with acceptable response time",
      "test_type": "reachability",
      "success_criteria": "HTTP 200 response with response time within acceptable thresholds",
      "failure_indicators": "Non-200 HTTP response, connection failure, or excessive response time"
    },
    {
      "id": "cmd_6",
      "description": "Network policy and connectivity validation",
      "command": "kubectl get networkpolicies -n default && kubectl get pods -n default | grep kube-znn | awk '{print $6}'",
      "expected_output": "Network policies and pod IP addresses",
      "test_type": "reachability",
      "success_criteria": "Pods have valid IP addresses and network policies are properly configured",
      "failure_indicators": "Pods have no IP addresses or network policies are misconfigured"
    }
  ]
}