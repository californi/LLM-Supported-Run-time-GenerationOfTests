{
  "analyzer": {
    "prompts": [
      {
        "template_name": "analyzer_v10_3",
        "template_content": "Analyze kube-znn service metrics and recommend test type.\n\nMETRICS:\n- CPU: {used_system_cpu}% ({cpu_range_description})\n- Memory: {used_system_memory}% ({memory_range_description})  \n- Response Time: {median_response_time}ms ({response_time_range_description})\n- Error Rate: {error_rate}%\n- Throughput: {throughput} req/s\n- Network Latency: {network_latency}ms\n\nLOAD:\n- Users: {concurrent_users}, Rate: {request_rate} req/s, Duration: {session_duration}s\n- Pattern: {load_pattern} ({load_pattern_description})\n- Current: {current_load_description}\n\nINFRASTRUCTURE:\n- Pods: {active_pods} active, {pending_pods} pending, {failed_pods} failed\n- Resources: {allocated_cpus} CPUs, {allocated_memory}GB RAM\n- Target: {target_system_pods} pods, Quality: {quality_of_media}\n\nADDITIONAL CONTEXT:\n- Pod Status: {active_pods} running, {pending_pods} pending, {failed_pods} failed\n- Resource Allocation: {allocated_cpus} CPUs, {allocated_memory}GB RAM allocated\n- Load Pattern: {load_pattern} with {concurrent_users} users at {request_rate} req/s\n- System Health: {health_criterion} (CPU: {used_system_cpu}%, Memory: {used_system_memory}%, Response: {median_response_time}ms)\n\nSTATUS: {system_status}\n\nANALYSIS: Analyze ALL metrics to recommend the most appropriate test type.\n\nTEST TYPE SELECTION RULES (HOLISTIC ANALYSIS):\nAnalyze ALL metrics together to determine the PRIMARY concern. Use this DECISION TREE:\n\nPRIORITY 1 - REACHABILITY:\n- Choose \"reachability\" when connectivity is the main issue\n- Conditions: Many failed pods (>5) + high error rate (>50%) + few users connecting (<10)\n- Indicators: System cannot be reached, high network latency (>1000ms), pods not responding\n- Example: Failed pods: 15, Error rate: 95%, Users: 1\n\nPRIORITY 2 - LOAD (HIGHEST PRIORITY CHECK):\n- Choose \"load\" when capacity/scalability is the main issue\n- Conditions: High CPU/memory (>70%) + many users (>100) + high request rate (>50 req/s)\n- KEY POINT: High response time with high CPU/memory + many users = LOAD, not response_time\n- System is overloaded and struggling with demand\n- Example: CPU: 83%, Memory: 82%, Users: 668, Request rate: 115 req/s\n\nPRIORITY 3 - RESPONSE_TIME:\n- Choose \"response_time\" when performance/latency is the main issue\n- Conditions: High response time (>1000ms) + stable system + few users (<10)\n- System works but is slow, NOT overloaded (CPU/memory <70%)\n- ONLY if load conditions are NOT met\n- Example: Response time: 5000ms, CPU: 20%, Memory: 25%, Users: 4\n\nDECISION FLOW:\n1. Check failed pods + error rate \u2192 reachability?\n2. Check CPU/memory + users + request rate \u2192 load?\n3. Else \u2192 response_time?\n\nRESPONSE (JSON only):\n{{\n  \"analysis_summary\": {{\n    \"recommended_test_type\": \"reachability|response_time|load\",\n    \"justification\": \"Detailed explanation of why this test type is most appropriate based on the metrics\",\n    \"priority\": \"high|medium|low\"\n  }}\n}}\n\nReturn only valid JSON.",
        "variables": {
          "analysis_timestamp": "27/10/2025 12:56:10",
          "experiment_id": "experiment_reachability_1761569770",
          "used_system_cpu": 1.5,
          "used_system_memory": 4.0,
          "median_response_time": 2500.0,
          "cpu_range_description": "within healthy range (<25%)",
          "memory_range_description": "within healthy range (<30%)",
          "response_time_range_description": "within critical range (>70ms)",
          "system_status": "operational",
          "concurrent_users": 0,
          "request_rate": 0.0,
          "session_duration": 0,
          "load_pattern": "burst",
          "load_pattern_description": "Burst load pattern",
          "current_load_description": "Moderate load",
          "target_system_pods": 0,
          "quality_of_media": 600,
          "target_system_architecture": "Microservices",
          "allocated_cpus": 6,
          "allocated_memory": 6,
          "error_rate": 95.0,
          "throughput": 0.0,
          "network_latency": 0.0,
          "active_pods": 0,
          "pending_pods": 0,
          "failed_pods": 15,
          "health_criterion": "Critical"
        },
        "filled_template": "Analyze kube-znn service metrics and recommend test type.\n\nMETRICS:\n- CPU: 1.5% (within healthy range (<25%))\n- Memory: 4.0% (within healthy range (<30%))  \n- Response Time: 2500.0ms (within critical range (>70ms))\n- Error Rate: 95.0%\n- Throughput: 0.0 req/s\n- Network Latency: 0.0ms\n\nLOAD:\n- Users: 0, Rate: 0.0 req/s, Duration: 0s\n- Pattern: burst (Burst load pattern)\n- Current: Moderate load\n\nINFRASTRUCTURE:\n- Pods: 0 active, 0 pending, 15 failed\n- Resources: 6 CPUs, 6GB RAM\n- Target: 0 pods, Quality: 600\n\nADDITIONAL CONTEXT:\n- Pod Status: 0 running, 0 pending, 15 failed\n- Resource Allocation: 6 CPUs, 6GB RAM allocated\n- Load Pattern: burst with 0 users at 0.0 req/s\n- System Health: Critical (CPU: 1.5%, Memory: 4.0%, Response: 2500.0ms)\n\nSTATUS: operational\n\nANALYSIS: Analyze ALL metrics to recommend the most appropriate test type.\n\nTEST TYPE SELECTION RULES (HOLISTIC ANALYSIS):\nAnalyze ALL metrics together to determine the PRIMARY concern. Use this DECISION TREE:\n\nPRIORITY 1 - REACHABILITY:\n- Choose \"reachability\" when connectivity is the main issue\n- Conditions: Many failed pods (>5) + high error rate (>50%) + few users connecting (<10)\n- Indicators: System cannot be reached, high network latency (>1000ms), pods not responding\n- Example: Failed pods: 15, Error rate: 95%, Users: 1\n\nPRIORITY 2 - LOAD (HIGHEST PRIORITY CHECK):\n- Choose \"load\" when capacity/scalability is the main issue\n- Conditions: High CPU/memory (>70%) + many users (>100) + high request rate (>50 req/s)\n- KEY POINT: High response time with high CPU/memory + many users = LOAD, not response_time\n- System is overloaded and struggling with demand\n- Example: CPU: 83%, Memory: 82%, Users: 668, Request rate: 115 req/s\n\nPRIORITY 3 - RESPONSE_TIME:\n- Choose \"response_time\" when performance/latency is the main issue\n- Conditions: High response time (>1000ms) + stable system + few users (<10)\n- System works but is slow, NOT overloaded (CPU/memory <70%)\n- ONLY if load conditions are NOT met\n- Example: Response time: 5000ms, CPU: 20%, Memory: 25%, Users: 4\n\nDECISION FLOW:\n1. Check failed pods + error rate \u2192 reachability?\n2. Check CPU/memory + users + request rate \u2192 load?\n3. Else \u2192 response_time?\n\nRESPONSE (JSON only):\n{\n  \"analysis_summary\": {\n    \"recommended_test_type\": \"reachability|response_time|load\",\n    \"justification\": \"Detailed explanation of why this test type is most appropriate based on the metrics\",\n    \"priority\": \"high|medium|low\"\n  }\n}\n\nReturn only valid JSON.",
        "entry_timestamp": "2025-10-27T12:56:10.162300",
        "entry_type": "template"
      }
    ],
    "llm_responses": [
      {
        "request": {
          "context": {
            "analysis_timestamp": "27/10/2025 12:56:10",
            "experiment_id": "experiment_reachability_1761569770",
            "used_system_cpu": 1.5,
            "used_system_memory": 4.0,
            "median_response_time": 2500.0,
            "cpu_range_description": "within healthy range (<25%)",
            "memory_range_description": "within healthy range (<30%)",
            "response_time_range_description": "within critical range (>70ms)",
            "system_status": "operational",
            "concurrent_users": 0,
            "request_rate": 0.0,
            "session_duration": 0,
            "load_pattern": "burst",
            "load_pattern_description": "Burst load pattern",
            "current_load_description": "Moderate load",
            "target_system_pods": 0,
            "quality_of_media": 600,
            "target_system_architecture": "Microservices",
            "allocated_cpus": 6,
            "allocated_memory": 6,
            "error_rate": 95.0,
            "throughput": 0.0,
            "network_latency": 0.0,
            "active_pods": 0,
            "pending_pods": 0,
            "failed_pods": 15,
            "health_criterion": "Critical"
          },
          "prompt": "Analyze kube-znn service metrics and recommend test type.\n\nMETRICS:\n- CPU: 1.5% (within healthy range (<25%))\n- Memory: 4.0% (within healthy range (<30%))  \n- Response Time: 2500.0ms (within critical range (>70ms))\n- Error Rate: 95.0%\n- Throughput: 0.0 req/s\n- Network Latency: 0.0ms\n\nLOAD:\n- Users: 0, Rate: 0.0 req/s, Duration: 0s\n- Pattern: burst (Burst load pattern)\n- Current: Moderate load\n\nINFRASTRUCTURE:\n- Pods: 0 active, 0 pending, 15 failed\n- Resources: 6 CPUs, 6GB RAM\n- Target: 0 pods, Quality: 600\n\nADDITIONAL CONTEXT:\n- Pod Status: 0 running, 0 pending, 15 failed\n- Resource Allocation: 6 CPUs, 6GB RAM allocated\n- Load Pattern: burst with 0 users at 0.0 req/s\n- System Health: Critical (CPU: 1.5%, Memory: 4.0%, Response: 2500.0ms)\n\nSTATUS: operational\n\nANALYSIS: Analyze ALL metrics to recommend the most appropriate test type.\n\nTEST TYPE SELECTION RULES (HOLISTIC ANALYSIS):\nAnalyze ALL metrics together to determine the PRIMARY concern. Use this DECISION TREE:\n\nPRIORITY 1 - REACHABILITY:\n- Choose \"reachability\" when connectivity is the main issue\n- Conditions: Many failed pods (>5) + high error rate (>50%) + few users connecting (<10)\n- Indicators: System cannot be reached, high network latency (>1000ms), pods not responding\n- Example: Failed pods: 15, Error rate: 95%, Users: 1\n\nPRIORITY 2 - LOAD (HIGHEST PRIORITY CHECK):\n- Choose \"load\" when capacity/scalability is the main issue\n- Conditions: High CPU/memory (>70%) + many users (>100) + high request rate (>50 req/s)\n- KEY POINT: High response time with high CPU/memory + many users = LOAD, not response_time\n- System is overloaded and struggling with demand\n- Example: CPU: 83%, Memory: 82%, Users: 668, Request rate: 115 req/s\n\nPRIORITY 3 - RESPONSE_TIME:\n- Choose \"response_time\" when performance/latency is the main issue\n- Conditions: High response time (>1000ms) + stable system + few users (<10)\n- System works but is slow, NOT overloaded (CPU/memory <70%)\n- ONLY if load conditions are NOT met\n- Example: Response time: 5000ms, CPU: 20%, Memory: 25%, Users: 4\n\nDECISION FLOW:\n1. Check failed pods + error rate \u2192 reachability?\n2. Check CPU/memory + users + request rate \u2192 load?\n3. Else \u2192 response_time?\n\nRESPONSE (JSON only):\n{\n  \"analysis_summary\": {\n    \"recommended_test_type\": \"reachability|response_time|load\",\n    \"justification\": \"Detailed explanation of why this test type is most appropriate based on the metrics\",\n    \"priority\": \"high|medium|low\"\n  }\n}\n\nReturn only valid JSON.",
          "prompt_type": "analysis_generation",
          "category": "analyzer_v10_3"
        },
        "response": {
          "timestamp": "2025-10-27T12:56:12.013233",
          "unique_session_id": "experiment_reachability_1761569770_unknown_20251027_125610_197596",
          "context": {
            "analysis_timestamp": "27/10/2025 12:56:10",
            "experiment_id": "experiment_reachability_1761569770",
            "used_system_cpu": 1.5,
            "used_system_memory": 4.0,
            "median_response_time": 2500.0,
            "cpu_range_description": "within healthy range (<25%)",
            "memory_range_description": "within healthy range (<30%)",
            "response_time_range_description": "within critical range (>70ms)",
            "system_status": "operational",
            "concurrent_users": 0,
            "request_rate": 0.0,
            "session_duration": 0,
            "load_pattern": "burst",
            "load_pattern_description": "Burst load pattern",
            "current_load_description": "Moderate load",
            "target_system_pods": 0,
            "quality_of_media": 600,
            "target_system_architecture": "Microservices",
            "allocated_cpus": 6,
            "allocated_memory": 6,
            "error_rate": 95.0,
            "throughput": 0.0,
            "network_latency": 0.0,
            "active_pods": 0,
            "pending_pods": 0,
            "failed_pods": 15,
            "health_criterion": "Critical"
          },
          "prompt": "Analyze kube-znn service metrics and recommend test type.\n\nMETRICS:\n- CPU: 1.5% (within healthy range (<25%))\n- Memory: 4.0% (within healthy range (<30%))  \n- Response Time: 2500.0ms (within critical range (>70ms))\n- Error Rate: 95.0%\n- Throughput: 0.0 req/s\n- Network Latency: 0.0ms\n\nLOAD:\n- Users: 0, Rate: 0.0 req/s, Duration: 0s\n- Pattern: burst (Burst load pattern)\n- Current: Moderate load\n\nINFRASTRUCTURE:\n- Pods: 0 active, 0 pending, 15 failed\n- Resources: 6 CPUs, 6GB RAM\n- Target: 0 pods, Quality: 600\n\nADDITIONAL CONTEXT:\n- Pod Status: 0 running, 0 pending, 15 failed\n- Resource Allocation: 6 CPUs, 6GB RAM allocated\n- Load Pattern: burst with 0 users at 0.0 req/s\n- System Health: Critical (CPU: 1.5%, Memory: 4.0%, Response: 2500.0ms)\n\nSTATUS: operational\n\nANALYSIS: Analyze ALL metrics to recommend the most appropriate test type.\n\nTEST TYPE SELECTION RULES (HOLISTIC ANALYSIS):\nAnalyze ALL metrics together to determine the PRIMARY concern. Use this DECISION TREE:\n\nPRIORITY 1 - REACHABILITY:\n- Choose \"reachability\" when connectivity is the main issue\n- Conditions: Many failed pods (>5) + high error rate (>50%) + few users connecting (<10)\n- Indicators: System cannot be reached, high network latency (>1000ms), pods not responding\n- Example: Failed pods: 15, Error rate: 95%, Users: 1\n\nPRIORITY 2 - LOAD (HIGHEST PRIORITY CHECK):\n- Choose \"load\" when capacity/scalability is the main issue\n- Conditions: High CPU/memory (>70%) + many users (>100) + high request rate (>50 req/s)\n- KEY POINT: High response time with high CPU/memory + many users = LOAD, not response_time\n- System is overloaded and struggling with demand\n- Example: CPU: 83%, Memory: 82%, Users: 668, Request rate: 115 req/s\n\nPRIORITY 3 - RESPONSE_TIME:\n- Choose \"response_time\" when performance/latency is the main issue\n- Conditions: High response time (>1000ms) + stable system + few users (<10)\n- System works but is slow, NOT overloaded (CPU/memory <70%)\n- ONLY if load conditions are NOT met\n- Example: Response time: 5000ms, CPU: 20%, Memory: 25%, Users: 4\n\nDECISION FLOW:\n1. Check failed pods + error rate \u2192 reachability?\n2. Check CPU/memory + users + request rate \u2192 load?\n3. Else \u2192 response_time?\n\nRESPONSE (JSON only):\n{\n  \"analysis_summary\": {\n    \"recommended_test_type\": \"reachability|response_time|load\",\n    \"justification\": \"Detailed explanation of why this test type is most appropriate based on the metrics\",\n    \"priority\": \"high|medium|low\"\n  }\n}\n\nReturn only valid JSON.",
          "enhanced_prompt": "\nEXPERIMENT_ID: experiment_reachability_1761569770\nRUN_ID: unknown\nTIMESTAMP: 20251027_125610_197596\nUNIQUE_SESSION: experiment_reachability_1761569770_unknown_20251027_125610_197596\n\nAnalyze kube-znn service metrics and recommend test type.\n\nMETRICS:\n- CPU: 1.5% (within healthy range (<25%))\n- Memory: 4.0% (within healthy range (<30%))  \n- Response Time: 2500.0ms (within critical range (>70ms))\n- Error Rate: 95.0%\n- Throughput: 0.0 req/s\n- Network Latency: 0.0ms\n\nLOAD:\n- Users: 0, Rate: 0.0 req/s, Duration: 0s\n- Pattern: burst (Burst load pattern)\n- Current: Moderate load\n\nINFRASTRUCTURE:\n- Pods: 0 active, 0 pending, 15 failed\n- Resources: 6 CPUs, 6GB RAM\n- Target: 0 pods, Quality: 600\n\nADDITIONAL CONTEXT:\n- Pod Status: 0 running, 0 pending, 15 failed\n- Resource Allocation: 6 CPUs, 6GB RAM allocated\n- Load Pattern: burst with 0 users at 0.0 req/s\n- System Health: Critical (CPU: 1.5%, Memory: 4.0%, Response: 2500.0ms)\n\nSTATUS: operational\n\nANALYSIS: Analyze ALL metrics to recommend the most appropriate test type.\n\nTEST TYPE SELECTION RULES (HOLISTIC ANALYSIS):\nAnalyze ALL metrics together to determine the PRIMARY concern. Use this DECISION TREE:\n\nPRIORITY 1 - REACHABILITY:\n- Choose \"reachability\" when connectivity is the main issue\n- Conditions: Many failed pods (>5) + high error rate (>50%) + few users connecting (<10)\n- Indicators: System cannot be reached, high network latency (>1000ms), pods not responding\n- Example: Failed pods: 15, Error rate: 95%, Users: 1\n\nPRIORITY 2 - LOAD (HIGHEST PRIORITY CHECK):\n- Choose \"load\" when capacity/scalability is the main issue\n- Conditions: High CPU/memory (>70%) + many users (>100) + high request rate (>50 req/s)\n- KEY POINT: High response time with high CPU/memory + many users = LOAD, not response_time\n- System is overloaded and struggling with demand\n- Example: CPU: 83%, Memory: 82%, Users: 668, Request rate: 115 req/s\n\nPRIORITY 3 - RESPONSE_TIME:\n- Choose \"response_time\" when performance/latency is the main issue\n- Conditions: High response time (>1000ms) + stable system + few users (<10)\n- System works but is slow, NOT overloaded (CPU/memory <70%)\n- ONLY if load conditions are NOT met\n- Example: Response time: 5000ms, CPU: 20%, Memory: 25%, Users: 4\n\nDECISION FLOW:\n1. Check failed pods + error rate \u2192 reachability?\n2. Check CPU/memory + users + request rate \u2192 load?\n3. Else \u2192 response_time?\n\nRESPONSE (JSON only):\n{\n  \"analysis_summary\": {\n    \"recommended_test_type\": \"reachability|response_time|load\",\n    \"justification\": \"Detailed explanation of why this test type is most appropriate based on the metrics\",\n    \"priority\": \"high|medium|low\"\n  }\n}\n\nReturn only valid JSON.\n\nIMPORTANTE: Esta \u00e9 uma requisi\u00e7\u00e3o \u00fanica para o experimento experiment_reachability_1761569770, run unknown. \nN\u00c3O reutilize dados de experimentos anteriores. Gere uma resposta espec\u00edfica para este momento.\n",
          "response": " {\n  \"analysis_summary\": {\n    \"recommended_test_type\": \"reachability\",\n    \"justification\": \"The high number of failed pods (15) and the extremely high error rate (95%) indicate a problem with reachability. This is the most significant issue based on the provided metrics.\",\n    \"priority\": \"high\"\n  }\n}",
          "prompt_type": "analysis_generation",
          "experiment_id": "experiment_reachability_1761569770",
          "run_id": "unknown"
        },
        "interaction_complete": true,
        "entry_timestamp": "2025-10-27T12:56:12.022952",
        "entry_type": "llm_request"
      },
      {
        "request": {
          "context": {
            "analysis_timestamp": "27/10/2025 12:56:10",
            "experiment_id": "experiment_reachability_1761569770",
            "used_system_cpu": 1.5,
            "used_system_memory": 4.0,
            "median_response_time": 2500.0,
            "cpu_range_description": "within healthy range (<25%)",
            "memory_range_description": "within healthy range (<30%)",
            "response_time_range_description": "within critical range (>70ms)",
            "system_status": "operational",
            "concurrent_users": 0,
            "request_rate": 0.0,
            "session_duration": 0,
            "load_pattern": "burst",
            "load_pattern_description": "Burst load pattern",
            "current_load_description": "Moderate load",
            "target_system_pods": 0,
            "quality_of_media": 600,
            "target_system_architecture": "Microservices",
            "allocated_cpus": 6,
            "allocated_memory": 6,
            "error_rate": 95.0,
            "throughput": 0.0,
            "network_latency": 0.0,
            "active_pods": 0,
            "pending_pods": 0,
            "failed_pods": 15,
            "health_criterion": "Critical"
          },
          "prompt": "Analyze kube-znn service metrics and recommend test type.\n\nMETRICS:\n- CPU: 1.5% (within healthy range (<25%))\n- Memory: 4.0% (within healthy range (<30%))  \n- Response Time: 2500.0ms (within critical range (>70ms))\n- Error Rate: 95.0%\n- Throughput: 0.0 req/s\n- Network Latency: 0.0ms\n\nLOAD:\n- Users: 0, Rate: 0.0 req/s, Duration: 0s\n- Pattern: burst (Burst load pattern)\n- Current: Moderate load\n\nINFRASTRUCTURE:\n- Pods: 0 active, 0 pending, 15 failed\n- Resources: 6 CPUs, 6GB RAM\n- Target: 0 pods, Quality: 600\n\nADDITIONAL CONTEXT:\n- Pod Status: 0 running, 0 pending, 15 failed\n- Resource Allocation: 6 CPUs, 6GB RAM allocated\n- Load Pattern: burst with 0 users at 0.0 req/s\n- System Health: Critical (CPU: 1.5%, Memory: 4.0%, Response: 2500.0ms)\n\nSTATUS: operational\n\nANALYSIS: Analyze ALL metrics to recommend the most appropriate test type.\n\nTEST TYPE SELECTION RULES (HOLISTIC ANALYSIS):\nAnalyze ALL metrics together to determine the PRIMARY concern. Use this DECISION TREE:\n\nPRIORITY 1 - REACHABILITY:\n- Choose \"reachability\" when connectivity is the main issue\n- Conditions: Many failed pods (>5) + high error rate (>50%) + few users connecting (<10)\n- Indicators: System cannot be reached, high network latency (>1000ms), pods not responding\n- Example: Failed pods: 15, Error rate: 95%, Users: 1\n\nPRIORITY 2 - LOAD (HIGHEST PRIORITY CHECK):\n- Choose \"load\" when capacity/scalability is the main issue\n- Conditions: High CPU/memory (>70%) + many users (>100) + high request rate (>50 req/s)\n- KEY POINT: High response time with high CPU/memory + many users = LOAD, not response_time\n- System is overloaded and struggling with demand\n- Example: CPU: 83%, Memory: 82%, Users: 668, Request rate: 115 req/s\n\nPRIORITY 3 - RESPONSE_TIME:\n- Choose \"response_time\" when performance/latency is the main issue\n- Conditions: High response time (>1000ms) + stable system + few users (<10)\n- System works but is slow, NOT overloaded (CPU/memory <70%)\n- ONLY if load conditions are NOT met\n- Example: Response time: 5000ms, CPU: 20%, Memory: 25%, Users: 4\n\nDECISION FLOW:\n1. Check failed pods + error rate \u2192 reachability?\n2. Check CPU/memory + users + request rate \u2192 load?\n3. Else \u2192 response_time?\n\nRESPONSE (JSON only):\n{\n  \"analysis_summary\": {\n    \"recommended_test_type\": \"reachability|response_time|load\",\n    \"justification\": \"Detailed explanation of why this test type is most appropriate based on the metrics\",\n    \"priority\": \"high|medium|low\"\n  }\n}\n\nReturn only valid JSON.",
          "prompt_type": "analysis_generation",
          "category": "analyzer_v10_3"
        },
        "response": {},
        "interaction_complete": true,
        "entry_timestamp": "2025-10-27T12:56:10.181955",
        "entry_type": "llm_request"
      },
      {
        "request": {
          "prompt": "Analyze kube-znn service metrics and recommend test type.\n\nMETRICS:\n- CPU: 1.5% (within healthy range (<25%))\n- Memory: 4.0% (within healthy range (<30%))  \n- Response Time: 2500.0ms (within critical range (>70ms))\n- Error Rate: 95.0%\n- Throughput: 0.0 req/s\n- Network Latency: 0.0ms\n\nLOAD:\n- Users: 0, Rate: 0.0 req/s, Duration: 0s\n- Pattern: burst (Burst load pattern)\n- Current: Moderate load\n\nINFRASTRUCTURE:\n- Pods: 0 active, 0 pending, 15 failed\n- Resources: 6 CPUs, 6GB RAM\n- Target: 0 pods, Quality: 600\n\nADDITIONAL CONTEXT:\n- Pod Status: 0 running, 0 pending, 15 failed\n- Resource Allocation: 6 CPUs, 6GB RAM allocated\n- Load Pattern: burst with 0 users at 0.0 req/s\n- System Health: Critical (CPU: 1.5%, Memory: 4.0%, Response: 2500.0ms)\n\nSTATUS: operational\n\nANALYSIS: Analyze ALL metrics to recommend the most appropriate test type.\n\nTEST TYPE SELECTION RULES (HOLISTIC ANALYSIS):\nAnalyze ALL metrics together to determine the PRIMARY concern. Use this DECISION TREE:\n\nPRIORITY 1 - REACHABILITY:\n- Choose \"reachability\" when connectivity is the main issue\n- Conditions: Many failed pods (>5) + high error rate (>50%) + few users connecting (<10)\n- Indicators: System cannot be reached, high network latency (>1000ms), pods not responding\n- Example: Failed pods: 15, Error rate: 95%, Users: 1\n\nPRIORITY 2 - LOAD (HIGHEST PRIORITY CHECK):\n- Choose \"load\" when capacity/scalability is the main issue\n- Conditions: High CPU/memory (>70%) + many users (>100) + high request rate (>50 req/s)\n- KEY POINT: High response time with high CPU/memory + many users = LOAD, not response_time\n- System is overloaded and struggling with demand\n- Example: CPU: 83%, Memory: 82%, Users: 668, Request rate: 115 req/s\n\nPRIORITY 3 - RESPONSE_TIME:\n- Choose \"response_time\" when performance/latency is the main issue\n- Conditions: High response time (>1000ms) + stable system + few users (<10)\n- System works but is slow, NOT overloaded (CPU/memory <70%)\n- ONLY if load conditions are NOT met\n- Example: Response time: 5000ms, CPU: 20%, Memory: 25%, Users: 4\n\nDECISION FLOW:\n1. Check failed pods + error rate \u2192 reachability?\n2. Check CPU/memory + users + request rate \u2192 load?\n3. Else \u2192 response_time?\n\nRESPONSE (JSON only):\n{\n  \"analysis_summary\": {\n    \"recommended_test_type\": \"reachability|response_time|load\",\n    \"justification\": \"Detailed explanation of why this test type is most appropriate based on the metrics\",\n    \"priority\": \"high|medium|low\"\n  }\n}\n\nReturn only valid JSON.",
          "context": {
            "analysis_timestamp": "27/10/2025 12:56:10",
            "experiment_id": "experiment_reachability_1761569770",
            "used_system_cpu": 1.5,
            "used_system_memory": 4.0,
            "median_response_time": 2500.0,
            "cpu_range_description": "within healthy range (<25%)",
            "memory_range_description": "within healthy range (<30%)",
            "response_time_range_description": "within critical range (>70ms)",
            "system_status": "operational",
            "concurrent_users": 0,
            "request_rate": 0.0,
            "session_duration": 0,
            "load_pattern": "burst",
            "load_pattern_description": "Burst load pattern",
            "current_load_description": "Moderate load",
            "target_system_pods": 0,
            "quality_of_media": 600,
            "target_system_architecture": "Microservices",
            "allocated_cpus": 6,
            "allocated_memory": 6,
            "error_rate": 95.0,
            "throughput": 0.0,
            "network_latency": 0.0,
            "active_pods": 0,
            "pending_pods": 0,
            "failed_pods": 15,
            "health_criterion": "Critical"
          }
        },
        "response": {
          "analysis": {
            "experiment_id": "experiment_reachability_1761569770",
            "cpu_usage_percent": 1.5,
            "memory_usage_percent": 4.0,
            "kube_znn_response_time_ms": 2500.0,
            "error_rate": 95.0,
            "throughput": 0.0,
            "network_latency": 0.0,
            "cpu_range_description": "within healthy range (<25%)",
            "memory_range_description": "within healthy range (<30%)",
            "response_time_range_description": "within critical range (>70ms)",
            "system_status": "operational",
            "quality_of_media": 600,
            "concurrent_users": 0,
            "request_rate": 0.0,
            "session_duration": 0,
            "load_pattern": "burst",
            "load_pattern_description": "Burst load pattern",
            "load_description": "Moderate load",
            "health_criterion": "Critical",
            "target_system_pods": 3,
            "active_pods": 0,
            "pending_pods": 0,
            "failed_pods": 15,
            "allocated_cpus": 6,
            "allocated_memory": 6
          }
        },
        "interaction_complete": true,
        "entry_timestamp": "2025-10-27T12:56:10.178187",
        "entry_type": "llm_request"
      }
    ]
  },
  "planner": {
    "prompts": [
      {
        "prompt": "Generate test plan for kube-znn service based on system metrics.\n\nMETRICS:\n- CPU: 1.5% (within healthy range (<25%))\n- Memory: 4.0% (within healthy range (<30%))  \n- Response Time: 2500.0ms (within critical range (>70ms))\n- Error Rate: 0.0%\n- Throughput: 0.0 req/s\n- Network Latency: 0.0ms\n\nLOAD:\n- Users: 30, Rate: 3.0 req/s, Duration: 120s\n- Pattern: burst (Burst pattern)\n- Current: Moderate load\n\nINFRASTRUCTURE:\n- Pods: 3 active, 0 pending, 0 failed\n- Resources: 6 CPUs, 6GB RAM\n- Target: 5 pods, Quality: 600\n\nANALYSIS:\n- Status: operational\n- Test Type: reachability\n- Priority: high\n- Justification: The high number of failed pods (15) and the extremely high error rate (95%) indicate a problem with reachability. This is the most significant issue based on the provided metrics.\n\nREQUIREMENT: Generate tests ONLY for \"reachability\" type.\n\nTEST GUIDELINES:\n- response_time: latency, performance, resource efficiency, network tests, pod metrics, service endpoints, resource monitoring, CPU/memory usage, response time validation, endpoint accessibility\n- reachability: connectivity, availability, pod status, health checks, service discovery, network policies, pod readiness, service endpoints, DNS resolution, port accessibility\n- load: capacity, scalability, stress, resource limits, throughput, horizontal pod autoscaling, resource utilization, performance degradation, bottleneck identification\n\nGenerate comprehensive test suites based on system state. Create thorough kubectl commands that cover all aspects of the recommended test type for complete system validation.\n\nJSON FORMAT:\n{\n  \"test_cases\": [\n    {\n      \"id\": \"test_1\",\n      \"name\": \"reachability - Basic Validation\", \n      \"description\": \"Comprehensive reachability test covering fundamental system aspects\",\n      \"test_type\": \"reachability\",\n      \"priority\": \"high\",\n      \"expected_result\": \"System demonstrates optimal reachability characteristics\",\n      \"success_criteria\": \"All reachability metrics within acceptable thresholds\",\n      \"failure_indicators\": \"Any reachability metric exceeds critical thresholds\"\n    },\n    {\n      \"id\": \"test_2\",\n      \"name\": \"reachability - Resource Impact Analysis\", \n      \"description\": \"Evaluate reachability behavior under current resource constraints\",\n      \"test_type\": \"reachability\",\n      \"priority\": \"high\",\n      \"expected_result\": \"System maintains reachability performance despite resource limitations\",\n      \"success_criteria\": \"Resource usage remains stable while reachability metrics are optimal\",\n      \"failure_indicators\": \"Resource constraints negatively impact reachability performance\"\n    },\n    {\n      \"id\": \"test_3\",\n      \"name\": \"reachability - Load Pattern Validation\", \n      \"description\": \"Validate reachability characteristics under current load pattern\",\n      \"test_type\": \"reachability\",\n      \"priority\": \"high\",\n      \"expected_result\": \"System handles current load pattern with optimal reachability\",\n      \"success_criteria\": \"reachability remains consistent throughout load pattern\",\n      \"failure_indicators\": \"Load pattern causes reachability degradation\"\n    },\n    {\n      \"id\": \"test_4\",\n      \"name\": \"reachability - Infrastructure Validation\", \n      \"description\": \"Comprehensive reachability validation across all infrastructure components\",\n      \"test_type\": \"reachability\",\n      \"priority\": \"high\",\n      \"expected_result\": \"All infrastructure components demonstrate optimal reachability\",\n      \"success_criteria\": \"Pods, services, and network components show consistent reachability\",\n      \"failure_indicators\": \"Infrastructure components show inconsistent reachability behavior\"\n    }\n  ],\n  \"kubectl_commands\": [\n    {\n      \"id\": \"cmd_1\",\n      \"description\": \"Comprehensive pod status and health validation\",\n      \"command\": \"kubectl get pods -n default | grep kube-znn | head -10\",\n      \"expected_output\": \"All pods running and ready with proper resource allocation\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"All pods show Running status with Ready condition\", \n      \"failure_indicators\": \"Any pod shows Pending, Error, CrashLoopBackOff, or resource issues\",\n      \"oracle_validation\": \"Pod status and resource allocation validation\"\n    },\n    {\n      \"id\": \"cmd_2\",\n      \"description\": \"Service discovery and endpoint connectivity validation\",\n      \"command\": \"kubectl get svc -n default | grep kube-znn\",\n      \"expected_output\": \"Valid cluster IP and active endpoints\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"Service has valid cluster IP with active endpoint subsets\",\n      \"failure_indicators\": \"Service has no cluster IP, pending status, or empty endpoints\",\n      \"oracle_validation\": \"Service discovery and endpoint connectivity validation\"\n    },\n    {\n      \"id\": \"cmd_3\",\n      \"description\": \"Resource utilization and performance metrics analysis\",\n      \"command\": \"kubectl top pods -n default | grep kube-znn\",\n      \"expected_output\": \"CPU and memory usage metrics for all containers\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"Pods show optimal resource utilization within defined limits\",\n      \"failure_indicators\": \"Pods show excessive CPU/memory usage or resource contention\",\n      \"oracle_validation\": \"Resource utilization and performance validation\"\n    },\n    {\n      \"id\": \"cmd_4\",\n      \"description\": \"Comprehensive log analysis for system health\",\n      \"command\": \"kubectl logs -n default $(kubectl get pods -n default | grep kube-znn | head -1 | awk '{print $1}') --tail=100 --timestamps\",\n      \"expected_output\": \"Clean logs with proper timestamps and no critical errors\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"No ERROR, FATAL, or critical warnings in recent logs\",\n      \"failure_indicators\": \"Critical errors, warnings, or abnormal log patterns detected\",\n      \"oracle_validation\": \"System health and log analysis validation\"\n    },\n    {\n      \"id\": \"cmd_5\",\n      \"description\": \"Service endpoint accessibility and response validation\",\n      \"command\": \"kubectl exec -n default $(kubectl get pods -n default | grep kube-znn | head -1 | awk '{print $1}') -- curl -s -o /dev/null -w '%{http_code} %{time_total}' http://localhost:80/news.php\",\n      \"expected_output\": \"200 with acceptable response time\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"HTTP 200 response with response time within acceptable thresholds\",\n      \"failure_indicators\": \"Non-200 HTTP response, connection failure, or excessive response time\",\n      \"oracle_validation\": \"Service endpoint accessibility and performance validation\"\n    },\n    {\n      \"id\": \"cmd_6\",\n      \"description\": \"Network policy and connectivity validation\",\n      \"command\": \"kubectl get networkpolicies -n default && kubectl get pods -n default | grep kube-znn | awk '{print $6}'\",\n      \"expected_output\": \"Network policies and pod IP addresses\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"Pods have valid IP addresses and network policies are properly configured\",\n      \"failure_indicators\": \"Pods have no IP addresses or network policies are misconfigured\",\n      \"oracle_validation\": \"Network connectivity and policy validation\"\n    },\n    {\n      \"id\": \"cmd_7\",\n      \"description\": \"Resource limits and requests validation\",\n      \"command\": \"kubectl get pods -n default | grep kube-znn | head -1 | awk '{print $1}' | xargs -I {} kubectl describe pod -n default {} | grep -A 10 'Limits\\|Requests'\",\n      \"expected_output\": \"Resource limits and requests configuration\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"Resource limits and requests are properly configured and within acceptable ranges\",\n      \"failure_indicators\": \"Resource limits too low, requests too high, or misconfigured resource allocation\",\n      \"oracle_validation\": \"Resource configuration validation\"\n    }\n  ]\n}\n\nReturn only valid JSON.",
        "test_plan": {
          "test_cases": [
            {
              "id": "test_1",
              "name": "reachability - Basic Validation",
              "description": "Comprehensive reachability test covering fundamental system aspects",
              "test_type": "reachability",
              "priority": "high",
              "expected_result": "System demonstrates optimal reachability characteristics",
              "success_criteria": "All reachability metrics within acceptable thresholds",
              "failure_indicators": "Any reachability metric exceeds critical thresholds"
            },
            {
              "id": "test_2",
              "name": "reachability - Resource Impact Analysis",
              "description": "Evaluate reachability behavior under current resource constraints",
              "test_type": "reachability",
              "priority": "high",
              "expected_result": "System maintains reachability performance despite resource limitations",
              "success_criteria": "Resource usage remains stable while reachability metrics are optimal",
              "failure_indicators": "Resource constraints negatively impact reachability performance"
            },
            {
              "id": "test_3",
              "name": "reachability - Load Pattern Validation",
              "description": "Validate reachability characteristics under current load pattern",
              "test_type": "reachability",
              "priority": "high",
              "expected_result": "System handles current load pattern with optimal reachability",
              "success_criteria": "reachability remains consistent throughout load pattern",
              "failure_indicators": "Load pattern causes reachability degradation"
            },
            {
              "id": "test_4",
              "name": "reachability - Infrastructure Validation",
              "description": "Comprehensive reachability validation across all infrastructure components",
              "test_type": "reachability",
              "priority": "high",
              "expected_result": "All infrastructure components demonstrate optimal reachability",
              "success_criteria": "Pods, services, and network components show consistent reachability",
              "failure_indicators": "Infrastructure components show inconsistent reachability behavior"
            }
          ],
          "kubectl_commands": [
            {
              "id": "cmd_1",
              "description": "Comprehensive pod status and health validation",
              "command": "kubectl get pods -n default | grep kube-znn | head -10",
              "expected_output": "All pods running and ready with proper resource allocation",
              "test_type": "reachability",
              "success_criteria": "All pods show Running status with Ready condition",
              "failure_indicators": "Any pod shows Pending, Error, CrashLoopBackOff, or resource issues",
              "oracle_validation": "Pod status and resource allocation validation"
            },
            {
              "id": "cmd_2",
              "description": "Service discovery and endpoint connectivity validation",
              "command": "kubectl get svc -n default | grep kube-znn",
              "expected_output": "Valid cluster IP and active endpoints",
              "test_type": "reachability",
              "success_criteria": "Service has valid cluster IP with active endpoint subsets",
              "failure_indicators": "Service has no cluster IP, pending status, or empty endpoints",
              "oracle_validation": "Service discovery and endpoint connectivity validation"
            },
            {
              "id": "cmd_3",
              "description": "Resource utilization and performance metrics analysis",
              "command": "kubectl top pods -n default | grep kube-znn",
              "expected_output": "CPU and memory usage metrics for all containers",
              "test_type": "reachability",
              "success_criteria": "Pods show optimal resource utilization within defined limits",
              "failure_indicators": "Pods show excessive CPU/memory usage or resource contention",
              "oracle_validation": "Resource utilization and performance validation"
            }
          ]
        },
        "kubectl_commands": [
          {
            "id": "cmd_1",
            "description": "Comprehensive pod status and health validation",
            "command": "kubectl get pods -n default | grep kube-znn | head -10",
            "expected_output": "All pods running and ready with proper resource allocation",
            "test_type": "reachability",
            "success_criteria": "All pods show Running status with Ready condition",
            "failure_indicators": "Any pod shows Pending, Error, CrashLoopBackOff, or resource issues",
            "oracle_validation": "Pod status and resource allocation validation"
          },
          {
            "id": "cmd_2",
            "description": "Service discovery and endpoint connectivity validation",
            "command": "kubectl get svc -n default | grep kube-znn",
            "expected_output": "Valid cluster IP and active endpoints",
            "test_type": "reachability",
            "success_criteria": "Service has valid cluster IP with active endpoint subsets",
            "failure_indicators": "Service has no cluster IP, pending status, or empty endpoints",
            "oracle_validation": "Service discovery and endpoint connectivity validation"
          },
          {
            "id": "cmd_3",
            "description": "Resource utilization and performance metrics analysis",
            "command": "kubectl top pods -n default | grep kube-znn",
            "expected_output": "CPU and memory usage metrics for all containers",
            "test_type": "reachability",
            "success_criteria": "Pods show optimal resource utilization within defined limits",
            "failure_indicators": "Pods show excessive CPU/memory usage or resource contention",
            "oracle_validation": "Resource utilization and performance validation"
          }
        ],
        "test_cases": [
          {
            "id": "test_1",
            "name": "reachability - Basic Validation",
            "description": "Comprehensive reachability test covering fundamental system aspects",
            "test_type": "reachability",
            "priority": "high",
            "expected_result": "System demonstrates optimal reachability characteristics",
            "success_criteria": "All reachability metrics within acceptable thresholds",
            "failure_indicators": "Any reachability metric exceeds critical thresholds"
          },
          {
            "id": "test_2",
            "name": "reachability - Resource Impact Analysis",
            "description": "Evaluate reachability behavior under current resource constraints",
            "test_type": "reachability",
            "priority": "high",
            "expected_result": "System maintains reachability performance despite resource limitations",
            "success_criteria": "Resource usage remains stable while reachability metrics are optimal",
            "failure_indicators": "Resource constraints negatively impact reachability performance"
          },
          {
            "id": "test_3",
            "name": "reachability - Load Pattern Validation",
            "description": "Validate reachability characteristics under current load pattern",
            "test_type": "reachability",
            "priority": "high",
            "expected_result": "System handles current load pattern with optimal reachability",
            "success_criteria": "reachability remains consistent throughout load pattern",
            "failure_indicators": "Load pattern causes reachability degradation"
          },
          {
            "id": "test_4",
            "name": "reachability - Infrastructure Validation",
            "description": "Comprehensive reachability validation across all infrastructure components",
            "test_type": "reachability",
            "priority": "high",
            "expected_result": "All infrastructure components demonstrate optimal reachability",
            "success_criteria": "Pods, services, and network components show consistent reachability",
            "failure_indicators": "Infrastructure components show inconsistent reachability behavior"
          }
        ]
      }
    ],
    "llm_responses": [
      {
        "prompt": "Generate test plan for kube-znn service based on system metrics.\n\nMETRICS:\n- CPU: 1.5% (within healthy range (<25%))\n- Memory: 4.0% (within healthy range (<30%))  \n- Response Time: 2500.0ms (within critical range (>70ms))\n- Error Rate: 0.0%\n- Throughput: 0.0 req/s\n- Network Latency: 0.0ms\n\nLOAD:\n- Users: 30, Rate: 3.0 req/s, Duration: 120s\n- Pattern: burst (Burst pattern)\n- Current: Moderate load\n\nINFRASTRUCTURE:\n- Pods: 3 active, 0 pending, 0 failed\n- Resources: 6 CPUs, 6GB RAM\n- Target: 5 pods, Quality: 600\n\nANALYSIS:\n- Status: operational\n- Test Type: reachability\n- Priority: high\n- Justification: The high number of failed pods (15) and the extremely high error rate (95%) indicate a problem with reachability. This is the most significant issue based on the provided metrics.\n\nREQUIREMENT: Generate tests ONLY for \"reachability\" type.\n\nTEST GUIDELINES:\n- response_time: latency, performance, resource efficiency, network tests, pod metrics, service endpoints, resource monitoring, CPU/memory usage, response time validation, endpoint accessibility\n- reachability: connectivity, availability, pod status, health checks, service discovery, network policies, pod readiness, service endpoints, DNS resolution, port accessibility\n- load: capacity, scalability, stress, resource limits, throughput, horizontal pod autoscaling, resource utilization, performance degradation, bottleneck identification\n\nGenerate comprehensive test suites based on system state. Create thorough kubectl commands that cover all aspects of the recommended test type for complete system validation.\n\nJSON FORMAT:\n{\n  \"test_cases\": [\n    {\n      \"id\": \"test_1\",\n      \"name\": \"reachability - Basic Validation\", \n      \"description\": \"Comprehensive reachability test covering fundamental system aspects\",\n      \"test_type\": \"reachability\",\n      \"priority\": \"high\",\n      \"expected_result\": \"System demonstrates optimal reachability characteristics\",\n      \"success_criteria\": \"All reachability metrics within acceptable thresholds\",\n      \"failure_indicators\": \"Any reachability metric exceeds critical thresholds\"\n    },\n    {\n      \"id\": \"test_2\",\n      \"name\": \"reachability - Resource Impact Analysis\", \n      \"description\": \"Evaluate reachability behavior under current resource constraints\",\n      \"test_type\": \"reachability\",\n      \"priority\": \"high\",\n      \"expected_result\": \"System maintains reachability performance despite resource limitations\",\n      \"success_criteria\": \"Resource usage remains stable while reachability metrics are optimal\",\n      \"failure_indicators\": \"Resource constraints negatively impact reachability performance\"\n    },\n    {\n      \"id\": \"test_3\",\n      \"name\": \"reachability - Load Pattern Validation\", \n      \"description\": \"Validate reachability characteristics under current load pattern\",\n      \"test_type\": \"reachability\",\n      \"priority\": \"high\",\n      \"expected_result\": \"System handles current load pattern with optimal reachability\",\n      \"success_criteria\": \"reachability remains consistent throughout load pattern\",\n      \"failure_indicators\": \"Load pattern causes reachability degradation\"\n    },\n    {\n      \"id\": \"test_4\",\n      \"name\": \"reachability - Infrastructure Validation\", \n      \"description\": \"Comprehensive reachability validation across all infrastructure components\",\n      \"test_type\": \"reachability\",\n      \"priority\": \"high\",\n      \"expected_result\": \"All infrastructure components demonstrate optimal reachability\",\n      \"success_criteria\": \"Pods, services, and network components show consistent reachability\",\n      \"failure_indicators\": \"Infrastructure components show inconsistent reachability behavior\"\n    }\n  ],\n  \"kubectl_commands\": [\n    {\n      \"id\": \"cmd_1\",\n      \"description\": \"Comprehensive pod status and health validation\",\n      \"command\": \"kubectl get pods -n default | grep kube-znn | head -10\",\n      \"expected_output\": \"All pods running and ready with proper resource allocation\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"All pods show Running status with Ready condition\", \n      \"failure_indicators\": \"Any pod shows Pending, Error, CrashLoopBackOff, or resource issues\",\n      \"oracle_validation\": \"Pod status and resource allocation validation\"\n    },\n    {\n      \"id\": \"cmd_2\",\n      \"description\": \"Service discovery and endpoint connectivity validation\",\n      \"command\": \"kubectl get svc -n default | grep kube-znn\",\n      \"expected_output\": \"Valid cluster IP and active endpoints\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"Service has valid cluster IP with active endpoint subsets\",\n      \"failure_indicators\": \"Service has no cluster IP, pending status, or empty endpoints\",\n      \"oracle_validation\": \"Service discovery and endpoint connectivity validation\"\n    },\n    {\n      \"id\": \"cmd_3\",\n      \"description\": \"Resource utilization and performance metrics analysis\",\n      \"command\": \"kubectl top pods -n default | grep kube-znn\",\n      \"expected_output\": \"CPU and memory usage metrics for all containers\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"Pods show optimal resource utilization within defined limits\",\n      \"failure_indicators\": \"Pods show excessive CPU/memory usage or resource contention\",\n      \"oracle_validation\": \"Resource utilization and performance validation\"\n    },\n    {\n      \"id\": \"cmd_4\",\n      \"description\": \"Comprehensive log analysis for system health\",\n      \"command\": \"kubectl logs -n default $(kubectl get pods -n default | grep kube-znn | head -1 | awk '{print $1}') --tail=100 --timestamps\",\n      \"expected_output\": \"Clean logs with proper timestamps and no critical errors\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"No ERROR, FATAL, or critical warnings in recent logs\",\n      \"failure_indicators\": \"Critical errors, warnings, or abnormal log patterns detected\",\n      \"oracle_validation\": \"System health and log analysis validation\"\n    },\n    {\n      \"id\": \"cmd_5\",\n      \"description\": \"Service endpoint accessibility and response validation\",\n      \"command\": \"kubectl exec -n default $(kubectl get pods -n default | grep kube-znn | head -1 | awk '{print $1}') -- curl -s -o /dev/null -w '%{http_code} %{time_total}' http://localhost:80/news.php\",\n      \"expected_output\": \"200 with acceptable response time\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"HTTP 200 response with response time within acceptable thresholds\",\n      \"failure_indicators\": \"Non-200 HTTP response, connection failure, or excessive response time\",\n      \"oracle_validation\": \"Service endpoint accessibility and performance validation\"\n    },\n    {\n      \"id\": \"cmd_6\",\n      \"description\": \"Network policy and connectivity validation\",\n      \"command\": \"kubectl get networkpolicies -n default && kubectl get pods -n default | grep kube-znn | awk '{print $6}'\",\n      \"expected_output\": \"Network policies and pod IP addresses\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"Pods have valid IP addresses and network policies are properly configured\",\n      \"failure_indicators\": \"Pods have no IP addresses or network policies are misconfigured\",\n      \"oracle_validation\": \"Network connectivity and policy validation\"\n    },\n    {\n      \"id\": \"cmd_7\",\n      \"description\": \"Resource limits and requests validation\",\n      \"command\": \"kubectl get pods -n default | grep kube-znn | head -1 | awk '{print $1}' | xargs -I {} kubectl describe pod -n default {} | grep -A 10 'Limits\\|Requests'\",\n      \"expected_output\": \"Resource limits and requests configuration\",\n      \"test_type\": \"reachability\",\n      \"success_criteria\": \"Resource limits and requests are properly configured and within acceptable ranges\",\n      \"failure_indicators\": \"Resource limits too low, requests too high, or misconfigured resource allocation\",\n      \"oracle_validation\": \"Resource configuration validation\"\n    }\n  ]\n}\n\nReturn only valid JSON.",
        "test_plan": {
          "test_cases": [
            {
              "id": "test_1",
              "name": "reachability - Basic Validation",
              "description": "Comprehensive reachability test covering fundamental system aspects",
              "test_type": "reachability",
              "priority": "high",
              "expected_result": "System demonstrates optimal reachability characteristics",
              "success_criteria": "All reachability metrics within acceptable thresholds",
              "failure_indicators": "Any reachability metric exceeds critical thresholds"
            },
            {
              "id": "test_2",
              "name": "reachability - Resource Impact Analysis",
              "description": "Evaluate reachability behavior under current resource constraints",
              "test_type": "reachability",
              "priority": "high",
              "expected_result": "System maintains reachability performance despite resource limitations",
              "success_criteria": "Resource usage remains stable while reachability metrics are optimal",
              "failure_indicators": "Resource constraints negatively impact reachability performance"
            },
            {
              "id": "test_3",
              "name": "reachability - Load Pattern Validation",
              "description": "Validate reachability characteristics under current load pattern",
              "test_type": "reachability",
              "priority": "high",
              "expected_result": "System handles current load pattern with optimal reachability",
              "success_criteria": "reachability remains consistent throughout load pattern",
              "failure_indicators": "Load pattern causes reachability degradation"
            },
            {
              "id": "test_4",
              "name": "reachability - Infrastructure Validation",
              "description": "Comprehensive reachability validation across all infrastructure components",
              "test_type": "reachability",
              "priority": "high",
              "expected_result": "All infrastructure components demonstrate optimal reachability",
              "success_criteria": "Pods, services, and network components show consistent reachability",
              "failure_indicators": "Infrastructure components show inconsistent reachability behavior"
            }
          ],
          "kubectl_commands": [
            {
              "id": "cmd_1",
              "description": "Comprehensive pod status and health validation",
              "command": "kubectl get pods -n default | grep kube-znn | head -10",
              "expected_output": "All pods running and ready with proper resource allocation",
              "test_type": "reachability",
              "success_criteria": "All pods show Running status with Ready condition",
              "failure_indicators": "Any pod shows Pending, Error, CrashLoopBackOff, or resource issues",
              "oracle_validation": "Pod status and resource allocation validation"
            },
            {
              "id": "cmd_2",
              "description": "Service discovery and endpoint connectivity validation",
              "command": "kubectl get svc -n default | grep kube-znn",
              "expected_output": "Valid cluster IP and active endpoints",
              "test_type": "reachability",
              "success_criteria": "Service has valid cluster IP with active endpoint subsets",
              "failure_indicators": "Service has no cluster IP, pending status, or empty endpoints",
              "oracle_validation": "Service discovery and endpoint connectivity validation"
            },
            {
              "id": "cmd_3",
              "description": "Resource utilization and performance metrics analysis",
              "command": "kubectl top pods -n default | grep kube-znn",
              "expected_output": "CPU and memory usage metrics for all containers",
              "test_type": "reachability",
              "success_criteria": "Pods show optimal resource utilization within defined limits",
              "failure_indicators": "Pods show excessive CPU/memory usage or resource contention",
              "oracle_validation": "Resource utilization and performance validation"
            }
          ]
        },
        "kubectl_commands": [
          {
            "id": "cmd_1",
            "description": "Comprehensive pod status and health validation",
            "command": "kubectl get pods -n default | grep kube-znn | head -10",
            "expected_output": "All pods running and ready with proper resource allocation",
            "test_type": "reachability",
            "success_criteria": "All pods show Running status with Ready condition",
            "failure_indicators": "Any pod shows Pending, Error, CrashLoopBackOff, or resource issues",
            "oracle_validation": "Pod status and resource allocation validation"
          },
          {
            "id": "cmd_2",
            "description": "Service discovery and endpoint connectivity validation",
            "command": "kubectl get svc -n default | grep kube-znn",
            "expected_output": "Valid cluster IP and active endpoints",
            "test_type": "reachability",
            "success_criteria": "Service has valid cluster IP with active endpoint subsets",
            "failure_indicators": "Service has no cluster IP, pending status, or empty endpoints",
            "oracle_validation": "Service discovery and endpoint connectivity validation"
          },
          {
            "id": "cmd_3",
            "description": "Resource utilization and performance metrics analysis",
            "command": "kubectl top pods -n default | grep kube-znn",
            "expected_output": "CPU and memory usage metrics for all containers",
            "test_type": "reachability",
            "success_criteria": "Pods show optimal resource utilization within defined limits",
            "failure_indicators": "Pods show excessive CPU/memory usage or resource contention",
            "oracle_validation": "Resource utilization and performance validation"
          }
        ],
        "test_cases": [
          {
            "id": "test_1",
            "name": "reachability - Basic Validation",
            "description": "Comprehensive reachability test covering fundamental system aspects",
            "test_type": "reachability",
            "priority": "high",
            "expected_result": "System demonstrates optimal reachability characteristics",
            "success_criteria": "All reachability metrics within acceptable thresholds",
            "failure_indicators": "Any reachability metric exceeds critical thresholds"
          },
          {
            "id": "test_2",
            "name": "reachability - Resource Impact Analysis",
            "description": "Evaluate reachability behavior under current resource constraints",
            "test_type": "reachability",
            "priority": "high",
            "expected_result": "System maintains reachability performance despite resource limitations",
            "success_criteria": "Resource usage remains stable while reachability metrics are optimal",
            "failure_indicators": "Resource constraints negatively impact reachability performance"
          },
          {
            "id": "test_3",
            "name": "reachability - Load Pattern Validation",
            "description": "Validate reachability characteristics under current load pattern",
            "test_type": "reachability",
            "priority": "high",
            "expected_result": "System handles current load pattern with optimal reachability",
            "success_criteria": "reachability remains consistent throughout load pattern",
            "failure_indicators": "Load pattern causes reachability degradation"
          },
          {
            "id": "test_4",
            "name": "reachability - Infrastructure Validation",
            "description": "Comprehensive reachability validation across all infrastructure components",
            "test_type": "reachability",
            "priority": "high",
            "expected_result": "All infrastructure components demonstrate optimal reachability",
            "success_criteria": "Pods, services, and network components show consistent reachability",
            "failure_indicators": "Infrastructure components show inconsistent reachability behavior"
          }
        ]
      }
    ],
    "test_plans": [
      {
        "test_cases": [
          {
            "id": "test_1",
            "name": "reachability - Basic Validation",
            "description": "Comprehensive reachability test covering fundamental system aspects",
            "test_type": "reachability",
            "priority": "high",
            "expected_result": "System demonstrates optimal reachability characteristics",
            "success_criteria": "All reachability metrics within acceptable thresholds",
            "failure_indicators": "Any reachability metric exceeds critical thresholds"
          },
          {
            "id": "test_2",
            "name": "reachability - Resource Impact Analysis",
            "description": "Evaluate reachability behavior under current resource constraints",
            "test_type": "reachability",
            "priority": "high",
            "expected_result": "System maintains reachability performance despite resource limitations",
            "success_criteria": "Resource usage remains stable while reachability metrics are optimal",
            "failure_indicators": "Resource constraints negatively impact reachability performance"
          },
          {
            "id": "test_3",
            "name": "reachability - Load Pattern Validation",
            "description": "Validate reachability characteristics under current load pattern",
            "test_type": "reachability",
            "priority": "high",
            "expected_result": "System handles current load pattern with optimal reachability",
            "success_criteria": "reachability remains consistent throughout load pattern",
            "failure_indicators": "Load pattern causes reachability degradation"
          },
          {
            "id": "test_4",
            "name": "reachability - Infrastructure Validation",
            "description": "Comprehensive reachability validation across all infrastructure components",
            "test_type": "reachability",
            "priority": "high",
            "expected_result": "All infrastructure components demonstrate optimal reachability",
            "success_criteria": "Pods, services, and network components show consistent reachability",
            "failure_indicators": "Infrastructure components show inconsistent reachability behavior"
          }
        ],
        "kubectl_commands": [
          {
            "id": "cmd_1",
            "description": "Comprehensive pod status and health validation",
            "command": "kubectl get pods -n default | grep kube-znn | head -10",
            "expected_output": "All pods running and ready with proper resource allocation",
            "test_type": "reachability",
            "success_criteria": "All pods show Running status with Ready condition",
            "failure_indicators": "Any pod shows Pending, Error, CrashLoopBackOff, or resource issues",
            "oracle_validation": "Pod status and resource allocation validation"
          },
          {
            "id": "cmd_2",
            "description": "Service discovery and endpoint connectivity validation",
            "command": "kubectl get svc -n default | grep kube-znn",
            "expected_output": "Valid cluster IP and active endpoints",
            "test_type": "reachability",
            "success_criteria": "Service has valid cluster IP with active endpoint subsets",
            "failure_indicators": "Service has no cluster IP, pending status, or empty endpoints",
            "oracle_validation": "Service discovery and endpoint connectivity validation"
          },
          {
            "id": "cmd_3",
            "description": "Resource utilization and performance metrics analysis",
            "command": "kubectl top pods -n default | grep kube-znn",
            "expected_output": "CPU and memory usage metrics for all containers",
            "test_type": "reachability",
            "success_criteria": "Pods show optimal resource utilization within defined limits",
            "failure_indicators": "Pods show excessive CPU/memory usage or resource contention",
            "oracle_validation": "Resource utilization and performance validation"
          }
        ]
      }
    ],
    "kubectl_commands": [
      {
        "id": "cmd_1",
        "description": "Comprehensive pod status and health validation",
        "command": "kubectl get pods -n default | grep kube-znn | head -10",
        "expected_output": "All pods running and ready with proper resource allocation",
        "test_type": "reachability",
        "success_criteria": "All pods show Running status with Ready condition",
        "failure_indicators": "Any pod shows Pending, Error, CrashLoopBackOff, or resource issues",
        "oracle_validation": "Pod status and resource allocation validation"
      },
      {
        "id": "cmd_2",
        "description": "Service discovery and endpoint connectivity validation",
        "command": "kubectl get svc -n default | grep kube-znn",
        "expected_output": "Valid cluster IP and active endpoints",
        "test_type": "reachability",
        "success_criteria": "Service has valid cluster IP with active endpoint subsets",
        "failure_indicators": "Service has no cluster IP, pending status, or empty endpoints",
        "oracle_validation": "Service discovery and endpoint connectivity validation"
      },
      {
        "id": "cmd_3",
        "description": "Resource utilization and performance metrics analysis",
        "command": "kubectl top pods -n default | grep kube-znn",
        "expected_output": "CPU and memory usage metrics for all containers",
        "test_type": "reachability",
        "success_criteria": "Pods show optimal resource utilization within defined limits",
        "failure_indicators": "Pods show excessive CPU/memory usage or resource contention",
        "oracle_validation": "Resource utilization and performance validation"
      }
    ]
  },
  "executor": {
    "kubectl_batches": [],
    "execution_results": [
      {
        "experiment_id": "experiment_reachability_1761569770",
        "run_id": "run_001",
        "execution_timestamp": "2025-10-27T12:56:28.765020",
        "success": true,
        "executed_commands": [
          {
            "id": "cmd_1",
            "description": "Comprehensive pod status and health validation",
            "command": "kubectl get pods -n default | grep kube-znn | head -10",
            "expected_output": "All pods running and ready with proper resource allocation",
            "test_type": "reachability",
            "success_criteria": "All pods show Running status with Ready condition",
            "failure_indicators": "Any pod shows Pending, Error, CrashLoopBackOff, or resource issues",
            "oracle_validation": "Pod status and resource allocation validation"
          },
          {
            "id": "cmd_2",
            "description": "Service discovery and endpoint connectivity validation",
            "command": "kubectl get svc -n default | grep kube-znn",
            "expected_output": "Valid cluster IP and active endpoints",
            "test_type": "reachability",
            "success_criteria": "Service has valid cluster IP with active endpoint subsets",
            "failure_indicators": "Service has no cluster IP, pending status, or empty endpoints",
            "oracle_validation": "Service discovery and endpoint connectivity validation"
          },
          {
            "id": "cmd_3",
            "description": "Resource utilization and performance metrics analysis",
            "command": "kubectl top pods -n default | grep kube-znn",
            "expected_output": "CPU and memory usage metrics for all containers",
            "test_type": "reachability",
            "success_criteria": "Pods show optimal resource utilization within defined limits",
            "failure_indicators": "Pods show excessive CPU/memory usage or resource contention",
            "oracle_validation": "Resource utilization and performance validation"
          }
        ],
        "execution_results": [
          {
            "command_id": "cmd_1",
            "command": "kubectl get pods -n default | grep kube-znn | head -10",
            "description": "Comprehensive pod status and health validation",
            "detailed_description": "Retrieves current status of ZNN pods including their state (Running, Pending, Error) and readiness indicators. This command verifies that all ZNN pods are healthy and accessible.",
            "execution_result": {
              "command": "kubectl get pods -n default | grep kube-znn | head -10",
              "detailed_description": "Retrieves current status of ZNN pods including their state (Running, Pending, Error) and readiness indicators. This command verifies that all ZNN pods are healthy and accessible.",
              "returncode": 0,
              "stdout": "kube-znn-nginx-fd4b57cfd-grp6m    1/1     Running            7 (12m ago)   40h\n",
              "stderr": "",
              "success": true,
              "timestamp": "2025-10-27T12:56:27.250436"
            },
            "oracle_validation": {
              "command_executed": true,
              "output_received": true,
              "error_detected": false,
              "success": true,
              "validation_details": {
                "oracle_validation": true,
                "reason": "Oracle validation passed"
              }
            },
            "success": true,
            "timestamp": "2025-10-27T12:56:27.269765"
          },
          {
            "command_id": "cmd_2",
            "command": "kubectl get svc -n default | grep kube-znn",
            "description": "Service discovery and endpoint connectivity validation",
            "detailed_description": "Executes kubectl command: kubectl get svc -n default | grep kube-znn. This command performs Kubernetes cluster operations for testing and validation purposes.",
            "execution_result": {
              "command": "kubectl get svc -n default | grep kube-znn",
              "detailed_description": "Executes kubectl command: kubectl get svc -n default | grep kube-znn. This command performs Kubernetes cluster operations for testing and validation purposes.",
              "returncode": 0,
              "stdout": "kube-znn-nginx   ClusterIP   10.96.173.106   <none>        80/TCP     40h\n",
              "stderr": "",
              "success": true,
              "timestamp": "2025-10-27T12:56:28.117631"
            },
            "oracle_validation": {
              "command_executed": true,
              "output_received": true,
              "error_detected": false,
              "success": true,
              "validation_details": {
                "oracle_validation": true,
                "reason": "Oracle validation passed"
              }
            },
            "success": true,
            "timestamp": "2025-10-27T12:56:28.133268"
          },
          {
            "command_id": "cmd_3",
            "command": "kubectl top pods -n default | grep kube-znn",
            "description": "Resource utilization and performance metrics analysis",
            "detailed_description": "Monitors real-time resource usage (CPU and memory) of ZNN pods. This command provides current resource consumption metrics to assess system performance and identify potential bottlenecks during testing.",
            "execution_result": {
              "command": "kubectl top pods -n default | grep kube-znn",
              "detailed_description": "Monitors real-time resource usage (CPU and memory) of ZNN pods. This command provides current resource consumption metrics to assess system performance and identify potential bottlenecks during testing.",
              "returncode": 0,
              "stdout": "kube-znn-nginx-fd4b57cfd-grp6m   2m           11Mi            \n",
              "stderr": "",
              "success": true,
              "timestamp": "2025-10-27T12:56:28.757690"
            },
            "oracle_validation": {
              "command_executed": true,
              "output_received": true,
              "error_detected": false,
              "success": true,
              "validation_details": {
                "oracle_validation": true,
                "reason": "Oracle validation passed"
              }
            },
            "success": true,
            "timestamp": "2025-10-27T12:56:28.764355"
          }
        ],
        "test_case_results": [
          {
            "test_case_id": "test_1",
            "test_case_name": "reachability - Basic Validation",
            "commands_executed": 0,
            "commands_successful": 0,
            "success": true,
            "execution_details": [],
            "timestamp": "2025-10-27T12:56:28.764880"
          },
          {
            "test_case_id": "test_2",
            "test_case_name": "reachability - Resource Impact Analysis",
            "commands_executed": 0,
            "commands_successful": 0,
            "success": true,
            "execution_details": [],
            "timestamp": "2025-10-27T12:56:28.764919"
          },
          {
            "test_case_id": "test_3",
            "test_case_name": "reachability - Load Pattern Validation",
            "commands_executed": 0,
            "commands_successful": 0,
            "success": true,
            "execution_details": [],
            "timestamp": "2025-10-27T12:56:28.764923"
          },
          {
            "test_case_id": "test_4",
            "test_case_name": "reachability - Infrastructure Validation",
            "commands_executed": 0,
            "commands_successful": 0,
            "success": true,
            "execution_details": [],
            "timestamp": "2025-10-27T12:56:28.764925"
          }
        ],
        "summary": {
          "total_commands": 3,
          "successful_commands": 3,
          "failed_commands": 0,
          "success_rate": 100.0,
          "oracle_validations_passed": 3,
          "oracle_validations_failed": 0,
          "overall_success": true
        },
        "detailed_descriptions": {
          "commands_with_descriptions": [
            {
              "command_id": "cmd_1",
              "command": "kubectl get pods -n default | grep kube-znn | head -10",
              "description": "Comprehensive pod status and health validation",
              "detailed_description": ""
            },
            {
              "command_id": "cmd_2",
              "command": "kubectl get svc -n default | grep kube-znn",
              "description": "Service discovery and endpoint connectivity validation",
              "detailed_description": ""
            },
            {
              "command_id": "cmd_3",
              "command": "kubectl top pods -n default | grep kube-znn",
              "description": "Resource utilization and performance metrics analysis",
              "detailed_description": ""
            }
          ]
        },
        "source": "executor_service",
        "service_version": "v10.3",
        "stored_timestamp": "2025-10-27T12:56:28.774468"
      }
    ],
    "test_results": []
  },
  "timestamp": "2025-10-27T09:56:10.068400",
  "scenario": "reachability",
  "experiment_id": "experiment_reachability_1761569770"
}